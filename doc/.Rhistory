#negative=mean(negative),
#positive=mean(positive)
)
names(sentence.list)
presid.summary=tbl_df(sentence.list)%>%
filter(type=="nomin", File%in%sel.comparison)%>%
#group_by(paste0(type, File))%>%
group_by(File)%>%
summarise(
anger=mean(anger),
anticipation=mean(anticipation),
disgust=mean(disgust),
fear=mean(fear),
joy=mean(joy),
sadness=mean(sadness),
surprise=mean(surprise),
trust=mean(trust)
#negative=mean(negative),
#positive=mean(positive)
)
presid.summary=as.data.frame(presid.summary)
rownames(presid.summary)=as.character((presid.summary[,1]))
km.res=kmeans(presid.summary[,-1], iter.max=200,
5)
fviz_cluster(km.res,
stand=F, repel= TRUE,
data = presid.summary[,-1], xlab="", xaxt="n",
show.clust.cent=FALSE)
heatmap.2(cor(sentence.list%>%filter(type=="inaug")%>%select(anger:positive)),
scale = "none",
col = bluered(100), , margin=c(6, 6), key=F,
trace = "none", density.info = "none")
par(mar=c(4, 6, 2, 1))
emo.means=colMeans(select(sentence.list, anger:positive)>0.01)
col.use=c("red2", "darkgoldenrod1",
"chartreuse3", "blueviolet",
"darkgoldenrod2", "dodgerblue3",
"darkgoldenrod1", "darkgoldenrod1",
"lightgray", "darkgoldenrod1")
barplot(emo.means[order(emo.means)], las=2, col=col.use[order(emo.means)], horiz=T)
heatmap.2(cor(sentence.list%>%filter(type=="inaug")%>%select(anger:trust)),
scale = "none",
col = bluered(100), , margin=c(6, 6), key=F,
trace = "none", density.info = "none")
par(mar=c(4, 6, 2, 1))
emo.means=colMeans(select(sentence.list, anger:positive)>0.01)
col.use=c("red2", "darkgoldenrod1",
"chartreuse3", "blueviolet",
"darkgoldenrod2", "dodgerblue3",
"darkgoldenrod1", "darkgoldenrod1")
barplot(emo.means[order(emo.means)], las=2, col=col.use[order(emo.means)], horiz=T)
heatmap.2(cor(sentence.list%>%filter(type=="inaug")%>%select(anger:trust)),
scale = "none",
col = bluered(100), , margin=c(6, 6), key=F,
trace = "none", density.info = "none")
par(mar=c(4, 6, 2, 1))
emo.means=colMeans(select(sentence.list, anger:trust)>0.01)
col.use=c("red2", "darkgoldenrod1",
"chartreuse3", "blueviolet",
"darkgoldenrod2", "dodgerblue3",
"darkgoldenrod1", "darkgoldenrod1")
barplot(emo.means[order(emo.means)], las=2, col=col.use[order(emo.means)], horiz=T)
heatmap.2(cor(sentence.list%>%filter(type=="inaug")%>%select(anger:trust)),
scale = "none",
col = bluered(100), , margin=c(6, 6), key=F,
trace = "none", density.info = "none")
par(mar=c(4, 6, 2, 1))
emo.means=colMeans(select(sentence.list, anger:trust)>0.01)
col.use=c("red2", "darkgoldenrod1",
"chartreuse3", "blueviolet",
"darkgoldenrod2", "dodgerblue3",
"darkgoldenrod1", "darkgoldenrod1")
barplot(emo.means[order(emo.means)], las=2, col=col.use[order(emo.means)], horiz=T, main="Inaugural Speeches")
shiny::runApp('Dropbox/Tian_Teaching/G5243-ADS/0-Projects-startercodes/3-Spring2017/Project2_OpenData/app')
runApp('Dropbox/Tian_Teaching/G5243-ADS/0-Projects-startercodes/3-Spring2017/Project2_OpenData/app')
install_version("ggplot2",
version = "2.1.0",
repos = "http://cran.us.r-project.org")
library(devtools)
install_version("ggplot2",
version = "2.1.0",
repos = "http://cran.us.r-project.org")
runApp('Dropbox/Tian_Teaching/G5243-ADS/0-Projects-startercodes/3-Spring2017/Project2_OpenData/app')
runApp('Dropbox/Tian_Teaching/G5243-ADS/0-Projects-startercodes/3-Spring2017/Project2_OpenData/app')
shiny::runApp('Dropbox/Tian_Teaching/G5243-ADS/0-Projects-startercodes/3-Spring2017/Project2_OpenData/app')
library(choroplethrZip)
data(df_pop_zip)
# zooming on a state
zip_choropleth(df_pop_zip,
state_zoom = "new york",
title      = "2012 New York State ZCTA Population Estimates",
legend     = "Population")
install_github('arilamstein/choroplethrZip@v1.4.0')
library(devtools)
install_github('arilamstein/choroplethrZip@v1.4.0')
library(choroplethrZip)
data(df_pop_zip)
# zooming on a state
zip_choropleth(df_pop_zip,
state_zoom = "new york",
title      = "2012 New York State ZCTA Population Estimates",
legend     = "Population")
install.packages("choroplethr")
install.packages("choroplethr")
library(choroplethrZip)
data(df_pop_zip)
# zooming on a state
zip_choropleth(df_pop_zip,
state_zoom = "new york",
title      = "2012 New York State ZCTA Population Estimates",
legend     = "Population")
zip_choropleth
render
c$render
library(choroplethrZip)
zip_choropleth(count.df,
title       = "2009 Manhattan housing sales",
legend      = "Number of sales",
county_zoom = 36061)
if (!require("DT")) install.packages('DT')
if (!require("dtplyr")) install.packages('dtplyr')
if(!require("lubridate")) install.packages('lubridate')
library(dtplyr)
library(dplyr)
library(DT)
library(lubridate)
install.packages("shiny")
library(shiny)
runExample("01_hello")
mh2009=read.csv(file="../data/ManhattanHousing.csv")
datatable(sample_n(mh2009, 50))
mh2009=
mh2009%>%
filter(ZIP.CODE>0)%>%
mutate(region=as.character(ZIP.CODE))
count.df=mh2009%>%
group_by(region)%>%
summarise(
value=n()
)
save(count.df, file="../output/count.RData")
if (!require("choroplethr")) install.packages("choroplethr")
if (!require("devtools")) install.packages("devtools")
library(devtools)
if (!require("choroplethrZip")) install_github('arilamstein/choroplethrZip@v1.4.0')
if (!require("ggplot2")) {
library(devtools)
install_version("ggplot2",
version = "2.1.0",
repos = "http://cran.us.r-project.org")
}
if (!require("ggmap")) install.packages("ggmap")
library(choroplethrZip)
zip_choropleth(count.df,
title       = "2009 Manhattan housing sales",
legend      = "Number of sales",
county_zoom = 36061)
install.packages("ggplot2")
install_github('arilamstein/choroplethrZip@v1.5.0')
library(devtools)
install_github('arilamstein/choroplethrZip@v1.5.0')
install.packages("choroplethr")
install.packages("ggplot2")
install.packages("ggmap")
if (!require("choroplethr")) install.packages("choroplethr")
if (!require("devtools")) install.packages("devtools")
library(devtools)
if (!require("choroplethrZip")) install_github('arilamstein/choroplethrZip@v1.5.0')
if (!require("ggplot2")) {
library(devtools)
install_version("ggplot2",
version = "2.1.0",
repos = "http://cran.us.r-project.org")
}
if (!require("ggmap")) install.packages("ggmap")
library(choroplethrZip)
zip_choropleth(count.df,
title       = "2009 Manhattan housing sales",
legend      = "Number of sales",
county_zoom = 36061)
NYC_map = get_googlemap(center = "New York", maptype = "roadmap",
zoom = 11, size = c(640, 420), color = "bw")
ggmap(NYC_map, extent = "device") +
geom_point(data = mh2009.selgeo, aes(x = lon, y = lat),
color = "#0571b0", size = 3)
ggmap(get_map("New York, New York",zoom=12,color = "bw")) +
geom_point(data=mh2009.selgeo, aes(x=longitude,y=latitude),  color='red')
library(ggmap)
mh2009.selgeo=
mh2009%>%
sample_n(10)%>%
select(starts_with("ADD"))%>%
mutate(ADDRESS_Ext=paste(ADDRESS, "New York, NY", sep=","))%>%
mutate_geocode(ADDRESS_Ext)
library(ggmap)
library(dplyr)
mh2009.selgeo=
mh2009%>%
sample_n(10)%>%
select(starts_with("ADD"))%>%
mutate(ADDRESS_Ext=paste(ADDRESS, "New York, NY", sep=","))%>%
mutate_geocode(ADDRESS_Ext)
names(mh2009.selgeo)
ggmap(get_map("New York, New York",zoom=12,color = "bw")) +
geom_point(data=mh2009.selgeo, aes(x=longitude,y=latitude),  color='red')
down vote
I ran into this problem as well today, and I had to install the GitHub development versions of ggplot2 and ggmap and restart R to get rid of this error:
devtools::install_github("dkahle/ggmap")
down vote
I ran into this problem as well today, and I had to install the GitHub development versions of ggplot2 and ggmap and restart R to get rid of this error:
devtools::install_github("dkahle/ggmap")
devtools::install_github("dkahle/ggmap")
devtools::install_github("dkahle/ggmap", force=TRUE)
library(ggmap)
ggmap(get_map("New York, New York",zoom=12,color = "bw")) +
geom_point(data=mh2009.selgeo, aes(x=longitude,y=latitude),  color='red')
library(ggmap)
ggmap(get_map("New York, New York",zoom=12,color = "bw")) +
geom_point(data=mh2009.selgeo, aes(x=lon,y=lat),  color='red')
library(ggmap)
ggmap(get_map("New York, New York",zoom=11,color = "bw")) +
geom_point(data=mh2009.selgeo, aes(x=lon,y=lat),  color='red')
library(ggmap)
ggmap(get_map("New York, New York",zoom=9,color = "bw")) +
geom_point(data=mh2009.selgeo, aes(x=lon,y=lat),  color='red')
library(ggmap)
ggmap(get_map("New York, New York",zoom=13,color = "bw")) +
geom_point(data=mh2009.selgeo, aes(x=lon,y=lat),  color='red')
library(ggmap)
ggmap(get_map("New York, New York",zoom=12,color = "bw")) +
geom_point(data=mh2009.selgeo, aes(x=lon,y=lat),  color='red')
library(ggmap)
ggmap(get_map("New York, New York",zoom=11,color = "bw")) +
geom_point(data=mh2009.selgeo, aes(x=lon,y=lat),  color='red')
shiny::runApp('~/Dropbox/Tian_Teaching/G5243-ADS/0-Projects-startercodes/3-Spring2017/Project2_OpenData/app')
if (!require("DT")) install.packages('DT')
if (!require("dtplyr")) install.packages('dtplyr')
if(!require("lubridate")) install.packages('lubridate')
library(dtplyr)
library(dplyr)
library(DT)
library(lubridate)
if(!require("ggmap")) install.packages('ggmap')
library(choroplethrZip)
if (!require("choroplethrZip")) install.packages("choroplethrZip")
if (!require("choroplethrZip")) {
# install.packages("devtools")
library(devtools)
install_github('arilamstein/choroplethrZip@v1.5.0')}
library(choroplethrZip)
zip_choropleth(count.df,
title       = "2009 Manhattan housing sales",
legend      = "Number of sales",
county_zoom = 36061)
library(ggmap)
ggmap(get_map("New York, New York",zoom=11,color = "bw")) +
geom_point(data=mh2009.selgeo, aes(x=lon,y=lat),  color='red')
library(ggmap)
library(dplyr)
mh2009.selgeo=
mh2009%>%
sample_n(10)%>%
select(starts_with("ADD"))%>%
mutate(ADDRESS_Ext=paste(ADDRESS, "New York, NY", sep=","))%>%
mutate_geocode(ADDRESS_Ext)
install.packages("shiny")
library(shiny)
runExample("01_hello")
mh2009=read.csv(file="../data/ManhattanHousing.csv")
datatable(sample_n(mh2009, 50))
mh2009=
mh2009%>%
filter(ZIP.CODE>0)%>%
mutate(region=as.character(ZIP.CODE))
count.df=mh2009%>%
group_by(region)%>%
summarise(
value=n()
)
save(count.df, file="../output/count.RData")
if (!require("choroplethr")) install.packages("choroplethr")
if (!require("devtools")) install.packages("devtools")
library(devtools)
if (!require("choroplethrZip"))
devtools::install_github('arilamstein/choroplethrZip@v1.5.0')
if (!require("ggplot2")) devtools::install_github("hadley/ggplot2")
if (!require("ggmap")) devtools::install_github("dkahle/ggmap")
library(choroplethrZip)
zip_choropleth(count.df,
title       = "2009 Manhattan housing sales",
legend      = "Number of sales",
county_zoom = 36061)
library(ggmap)
library(dplyr)
mh2009.selgeo=
mh2009%>%
sample_n(10)%>%
select(starts_with("ADD"))%>%
mutate(ADDRESS_Ext=paste(ADDRESS, "New York, NY", sep=","))%>%
mutate_geocode(ADDRESS_Ext)
library(ggmap)
ggmap(get_map("New York, New York",zoom=11,color = "bw")) +
geom_point(data=mh2009.selgeo, aes(x=lon,y=lat),  color='red')
View(mh2009.selgeo)
library(ggmap)
library(dplyr)
mh2009.selgeo=
mh2009%>%
sample_n(30)%>%
select(starts_with("ADD"))%>%
mutate(ADDRESS_Ext=paste(ADDRESS, "New York, NY", sep=","))%>%
mutate_geocode(ADDRESS_Ext)
mh2009.selgeo=mh2009.selgeo%>%
na.omit()
library(ggmap)
ggmap(get_map("New York, New York",zoom=11,color = "bw")) +
geom_point(data=mh2009.selgeo, aes(x=lon,y=lat),  color='red')
View(mh2009.selgeo)
library(ggmap)
ggmap(get_map("New York City",zoom=11,color = "bw")) +
geom_point(data=mh2009.selgeo, aes(x=lon,y=lat),  color='red')
library(ggmap)
ggmap(get_map("New York City",source="google",
zoom=11, color = "bw")) +
geom_point(data=mh2009.selgeo, aes(x=lon,y=lat),  color='red')
library(ggmap)
ggmap(get_map("New York City",source="google",
maptype = "hybird",
zoom=11, color = "bw")) +
geom_point(data=mh2009.selgeo, aes(x=lon,y=lat),  color='red')
library(ggmap)
ggmap(get_map("New York City",source="google",
maptype = "hybrid",
zoom=11, color = "bw")) +
geom_point(data=mh2009.selgeo, aes(x=lon,y=lat),  color='red')
library(ggmap)
ggmap(get_map("New York City",source="google",
maptype = "hybrid",
zoom=12, color = "bw")) +
geom_point(data=mh2009.selgeo, aes(x=lon,y=lat),  color='red')
library(ggmap)
ggmap(get_map("Manhattan",source="google",
maptype = "hybrid",
zoom=12, color = "bw")) +
geom_point(data=mh2009.selgeo, aes(x=lon,y=lat),  color='red')
shiny::runApp()
runApp()
library(leaflet)
runApp()
runApp()
getwd()
files <- list.files(path="../figs/numbers/mapmarker", full.names=TRUE, recursive=FALSE)
files
files <- list.files(path="../figs/numbers/mapmarker", full.names=F, recursive=FALSE)
files
lapply(files, function(x) {
project = makeIcon(x)
}
icon_list <- iconList(
project1 = makeIcon("C:/Map/1.png", iconWidth = 24, iconHeight = 30),
project2 = makeIcon("C:/Map/2.png", iconWidth = 24, iconHeight = 30)
)
lapply(files, function(x) {
project = makeIcon(x)
}
lapply(files, function(x) {
project = makeIcon(x)
})
lapply(pics, function(x) {
project = makeIcon(x)
})
pics <- list.files(path="../figs/numbers/mapmarker",pattern="*.png", full.names=T, recursive=FALSE)
lapply(pics, function(x) {
project = makeIcon(x)
})
makeIcon(pics)
lapply(pics, makeIcon())
lapply(pics, makeIcon())
lapply(pics,  function(x) makeIcon(x))
markers <- lapply(pics,  function(x) makeIcon(x))
live <- fromJSON(file = "https://gbfs.citibikenyc.com/gbfs/en/station_status.json")
stations <- fromJSON(file = "https://gbfs.citibikenyc.com/gbfs/en/station_information.json")
live$stations
live$data$stations
live$data$stations$station_id
str(live$data$stations)
for( i in live$data$stations) i$station_id
for( i in live$data$stations) print(i$station_id)
for( j in stations$data$stations) print(j$station_id)
for( i in live$data$stations) print(i$station_id)
a <- for( i in live$data$stations) i$station_id
b <- for( j in stations$data$stations) j$station_id
b <- for( j in stations$data$stations) print(j$station_id)
pics <- list.files(path="../figs/numbers/mapmarker",pattern="*.png", full.names=T, recursive=FALSE)
markers <- lapply(pics,  function(x) makeIcon(x))
runApp()
pics <- list.files(path="../figs/numbers/mapmarker",pattern="*.png", full.names=T, recursive=FALSE)
markers <- lapply(pics,  function(x) makeIcon(x))
markers
names(markers)
markers
str(markers)
s$available
s <- data.frame(lat = rep(NA, l), lng <- rep(NA, l))
for(i in 1:l){
s$lat[i] <- stations$data$stations[i][[1]]$lat
s$lng[i] <- stations$data$stations[i][[1]]$lon
s$available[i] <- live$data$stations[i][[1]]$num_bikes_available
}
l <- length(stations$data$stations)
s <- data.frame(lat = rep(NA, l), lng <- rep(NA, l))
for(i in 1:l){
s$lat[i] <- stations$data$stations[i][[1]]$lat
s$lng[i] <- stations$data$stations[i][[1]]$lon
s$available[i] <- live$data$stations[i][[1]]$num_bikes_available
}
s$available
markers[[1]]
names(markers)
1:100 <- names(markers)
markers
length(markers)
1:99 <- names(markers)
names(markers) <- 1:99
markers
runApp()
markers <- iconList(markers)
markers <- lapply(pics,  function(x) makeIcon(x))
markers <- iconList(markers)
markers <- iconList()
makeIcon(pics[1])
markers <- lapply(pics,  function(x) makeIcon(x))
markers[1]
markers[1][[1]]
markers[][[1]]
pics <- list.files(path="../figs/numbers/mapiconscollection",pattern="*.png", full.names=T, recursive=FALSE)
markers <- lapply(pics,  function(x) makeIcon(x))
markers
markers <- iconList(markers[1][[1]])
markers
markers <- lapply(pics,  function(x) makeIcon(x))
markerslist <- iconList(markers)
markerslist <- iconList(markers[1])
markers[1]
markerslist <- iconList(markers[2])
markers[2]
as.character(markers[[1]])
as.character(markers[1][[1]])
as.character(markers[1])
markers[1]
markers[1][[1]]
makeIcon/pics)
makeIcon(pics)
markerslist <- iconList(makeIcon(pics))
markerslist
runApp()
markers
markers[1][[1]]
markerrs <- list()
for(i in markers) markerrs[i] <- i
markerrs <- list()
for(i in markers) markerrs[i] <- i
markers
length(markers)
markerrs <- list()
for(i in 1:length(markers)) markerrs[1][[i]] <- i
markers[1][[2]]
for(i in 1:length(markers)) markerrs[i][[1]] <- i
markerrs <- list()
for(i in 1:length(markers)) markerrs[i] <-  markerrs[i][[1]]
markerrs <- list()
for(i in 1:length(markers)) markerrs[i] <-  markerrs[i][[1]]
markerrs <- list()
for(i in 1:length(markers)) markerrs[[i]] <-  markerrs[i][[1]]
markerrs <- list()
for(i in 1:length(markers)) markerrs[[i]] <-  markerrs[[i]][[1]]
markers <- lapply(pics,  function(x) makeIcon(x))
unlist(markers)
unlist(markers, recursive = F)
markersList <- iconList(unlist(markers, recursive = F))
markers <- list()
for(i in 1:length(pics)){
markers[[i]] <- makeIcon(pics[i])
}
markers
markers[1]
markers <- lapply(pics,  function(x) makeIcon(x))
unlist(markers, recursive = F)
markers <- apply(pics,  function(x) makeIcon(x))
markers <- apply(pics, makeIcon())
markers <- lapply(pics, makeIcon())
library(RDSTK)
library(foreach)
library(ggmap)
markers <- iconList(markers)
markers
str(pics)
typeof(pics)
as.list(pics)
pics[1]
markers <- lapply(pics,  function(x) makeIcon(x))
class(markers) <- "leaflet_icon_set"
markers
runApp()
pics
order(pics)
SORT(pics)
sort(pics)
grep("_", pics[1])
grep("f", pics[1])
pics[1]
grepl("f", pics[1])
