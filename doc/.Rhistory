<<<<<<< HEAD
add_markers(data = df_route1,lat = as.character(pairs_all[[nearest_s2]][1]), lon = as.character(pairs_all[[nearest_s2]][2]), marker_icon = pics[2])
}) }
shinyApp(ui, server)
## Not run:
library(shiny)
library(googleway)
ui <- fluidPage(
mainPanel(
google_mapOutput("map")
),
#sidebarPanel(
# textInput("text", label = h3("Text input"), value = "Enter text..."),
# hr(),
# fluidRow(column(3, verbatimTextOutput("value")))
# )
)
server <- function(input, output, session){
api_key <- "your_api_key"
live <- fromJSON(file = "https://gbfs.citibikenyc.com/gbfs/en/station_status.json")
stations <- fromJSON(file = "https://gbfs.citibikenyc.com/gbfs/en/station_information.json")
#load("../output/bikeRoutes.RData")
## data handling
l <- length(stations$data$stations)
s <- data.frame(lat = rep(NA, l), lng <- rep(NA, l))
for(i in 1:l){
s$lat[i] <- stations$data$stations[i][[1]]$lat
s$lng[i] <- stations$data$stations[i][[1]]$lon
s$available[i] <- live$data$stations[i][[1]]$num_bikes_available
}
# Remove 0 bikes stations
s_nonzero <- s[-c(which(s$available==0)),]
# User Input: current location and destination. current, destination
current <- "Columbia University, New York"  # set for illustration
destination <- "Time Square, New York"
# Create pairs of lattitude and longitute for all bike stations
pairs_all <- mapply(c, s$lat, s$lng, SIMPLIFY = FALSE)
pairs_nonzero <- mapply(c, s_nonzero$lat, s_nonzero$lng, SIMPLIFY = FALSE)
## Obtain the nearest citi bike station
#current_to_stations <- data.frame()
#duration_list <- c()
duration_value_list1 <- c()
duration_value_list2 <- c()
# nearest pick up bike station from current
for(i in 1:nrow(s)){
d1 <- google_distance(origin = current,
destination = pairs_nonzero[[i]],
mode = "walk")$rows$elements[[1]][1,2]
duration_value_list1 <- c(duration_value_list1,d1[1,2])
#duration_value_list1 <- c(duration_value_list, d1[1,2])
}
nearest_s1 <- which.min(duration_value_list1)
# nearest drop off bike station to destination
for(i in 1:nrow(s)){
d2 <- google_distance(origin = pairs_all[[i]],
destination = destination,
mode = "walk")$rows$elements[[1]][1,2]
duration_value_list2 <- c(duration_value_list2, d2[1,2])
#duration_value_list2 <- c()
}
nearest_s2 <- which.min(duration_value_list2)
# route from current to nearest station
r1 <- google_directions(origin = current,
destination = pairs_nonzero[[nearest_s1]],
mode = "walk")
df_route1 <- data.frame(polyline = r1$routes$overview_polyline$points)
df_route1$lat <- current[1,1]
duration1 <- google_distance(origin = current,
destination = pairs_nonzero[[nearest_s1]],
mode = "walk")$rows$elements[[1]][1,2][1,1]
# route from start station to end station
r2 <- google_directions(origin = pairs_nonzero[[nearest_s1]],
destination = pairs_all[[nearest_s2]],
mode = "bicycling")
df_route2 <- data.frame(polyline = r2$routes$overview_polyline$points)
duration2 <- google_distance(origin = pairs_nonzero[[nearest_s1]],
destination = pairs_all[[nearest_s2]],
mode = "bicycling")$rows$elements[[1]][1,2][1,1]
# route from end station to final destination
r3 <- google_directions(origin = pairs_all[[nearest_s2]],
destination = destination,
mode = "walk")
df_route3 <- data.frame(polyline = r3$routes$overview_polyline$points)
duration3 <- google_distance(origin = pairs_all[[nearest_s2]],
destination = destination,
mode = "bicycling")$rows$elements[[1]][1,2][1,1]
output$map <- renderGoogle_map({
google_map(location = current,
zoom = 10)%>%
add_polylines(data = df_route1,
polyline = "polyline", stroke_colour = "#FF33D6") %>%
add_polylines(data = df_route2,
polyline = "polyline") %>%
add_polylines(data = df_route3,
polyline = "polyline", stroke_colour = "#FF33D6") %>%
add_markers(data = df_route1,lat = as.character(pairs_all[[nearest_s2]][1]), lon = as.character(pairs_all[[nearest_s2]][2]), marker_icon = pics[2])
}) }
shinyApp(ui, server)
ui <- fluidPage(
mainPanel(
google_mapOutput("map")
)
#sidebarPanel(
# textInput("text", label = h3("Text input"), value = "Enter text..."),
# hr(),
# fluidRow(column(3, verbatimTextOutput("value")))
# )
)
=======
map_key <- "MAP_KEY"
api_key <- "API_KEY"
output$mapWarsaw <- renderGoogle_map({
google_map(key = map_key,
search_box = TRUE,
scale_control = TRUE,
height = 1000) %>%
add_traffic()
})
observeEvent(input$getRoute,{
print("getting route")
o <- input$origin
w <- input$waypoint
q <- input$waypoint2
d <- input$destination
res <- google_directions(key = api_key,
origin = o,
waypoints = list(stop = w,
stop = q),
destination = d,
optimise_waypoints = TRUE,
mode = "driving")
df_route <- data.frame(route = res$routes$overview_polyline$points)
df_way <- cbind(
res$routes$legs[[1]]$end_location,
data.frame(address = res$routes$legs[[1]]$end_address)
)
df_way$order <- as.character(1:nrow(df_way))
google_map_update(map_id = "mapWarsaw") %>%
clear_traffic() %>%
clear_polylines() %>%
clear_markers() %>%
add_traffic() %>%
add_polylines(data = df_route,
polyline = "route",
stroke_colour = "#FF33D6",
stroke_weight = 7,
stroke_opacity = 0.7,
info_window = "New route",
load_interval = 100) %>%
add_markers(data = df_way,
info_window = "end_address",
label = "order")
})
}
>>>>>>> 6c6026de699464234a8d43d2b18aa60362f733fd
shinyApp(ui, server)
ui <- fluidPage(
sidebarPanel(
textInput("text", label = h3("Current Location"))
# fluidRow(column(3, verbatimTextOutput("value")))
),
mainPanel(
google_mapOutput("map")
)
)
shinyApp(ui, server)
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
textInput("text", label = h3("Current Location"))
# fluidRow(column(3, verbatimTextOutput("value")))
),
mainPanel(
google_mapOutput("map")
)
)
)
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(),
dashboardBody(
box(width = 6,
google_mapOutput(outputId = "map")
)#,
#box(width = 6,
#  google_mapOutput(outputId = "pano")
)
) )
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(),
dashboardBody(
box(width = 6,
google_mapOutput(outputId = "map")
)#,
#box(width = 6,
#  google_mapOutput(outputId = "pano")
)
)
server <- function(input, output) {
set_key(key)
output$map <- renderGoogle_map({
res <- google_directions(origin = "Columbia University, New York",
destination = "Time Square, New York",
mode = "bicycling")
df_route <- data.frame(polyline = res$routes$overview_polyline$points)
google_map(location = c(-37.817386, 144.967463),
zoom = 10,
split_view = "pano")%>%
#add_bicycling()%>%
add_polylines(data = df_route,
polyline = "polyline"
#stroke_colour = "#FF33D6",
#stroke_weight = 7,
#stroke_opacity = 0.7,
#info_window = "New route",
#load_interval = 100
)
#google_map_directions(origin = "Melbourne Cricket Ground",
#destination = "Flinders Street Station",
#dir_action = "navigate")
#google_directions(origin = "Flinders Street Station, Melbourne",
#                 destination = "MCG, Melbourne",
#               mode = "walking")
}) }
shinyApp(ui, server)
cat("From current location to the nearest citi bike station would take", duration1)
cat("From drop off citi bike station to the final destination would take", duration2, ".")
cat("From drop off citi bike station to the final destination would take", duration3, ".")
df_route3%>%leaflet()
# Plot map and biking route
google_map(location = current,
zoom = 10)%>%
add_polylines(data = df_route1,
polyline = "polyline", stroke_colour = "#FF33D6") %>%
add_polylines(data = df_route2,
polyline = "polyline") %>%
add_polylines(data = df_route3,
polyline = "polyline", stroke_colour = "#FF33D6") #%>%
# Plot map and biking route
google_map(location = current,
zoom = 10) %>%
add_polylines(data = df_route1,
polyline = "polyline", stroke_colour = "#FF33D6") %>%
add_polylines(data = df_route2,
polyline = "polyline") %>%
add_polylines(data = df_route3,
polyline = "polyline", stroke_colour = "#FF33D6") %>%
add_bicycling()
google_map(location = current,
zoom = 10)%>%
add_polylines(data = df_route1,
polyline = "polyline", stroke_colour = "#FF33D6") %>%
add_polylines(data = df_route2,
polyline = "polyline",stroke_weight = 10) %>%
add_polylines(data = df_route3,
polyline = "polyline", stroke_colour = "#FF33D6") %>%
add_markers(data = df_route1,lat = as.character(pairs_all[[nearest_s2]][1]), lon = as.character(pairs_all[[nearest_s2]][2]), marker_icon = pics[2])
google_map(location = current,
zoom = 10)%>%
add_polylines(data = df_route1,
polyline = "polyline", stroke_colour = "#FF33D6") %>%
add_polylines(data = df_route2,
polyline = "polyline",stroke_weight = 8) %>%
add_polylines(data = df_route3,
polyline = "polyline", stroke_colour = "#FF33D6") %>%
add_markers(data = df_route1,lat = as.character(pairs_all[[nearest_s2]][1]), lon = as.character(pairs_all[[nearest_s2]][2]), marker_icon = pics[2])
google_map(location = current,
zoom = 10)%>%
add_polylines(data = df_route1,
polyline = "polyline", stroke_colour = "#FF33D6") %>%
add_polylines(data = df_route2,
polyline = "polyline",stroke_weight = 7) %>%
add_polylines(data = df_route3,
polyline = "polyline", stroke_colour = "#FF33D6") %>%
add_markers(data = df_route1,lat = as.character(pairs_all[[nearest_s2]][1]), lon = as.character(pairs_all[[nearest_s2]][2]), marker_icon = pics[2])
google_map(location = current,
zoom = 10)%>%
add_polylines(data = df_route1,
polyline = "polyline", stroke_colour = "#FF33D6",stroke_weight = 7) %>%
add_polylines(data = df_route2,
polyline = "polyline",stroke_weight = 7) %>%
add_polylines(data = df_route3,
polyline = "polyline", stroke_colour = "#FF33D6",stroke_weight = 7) %>%
add_markers(data = df_route1,lat = as.character(pairs_all[[nearest_s2]][1]), lon = as.character(pairs_all[[nearest_s2]][2]), marker_icon = pics[2])
stations
live <- fromJSON(file = "https://gbfs.citibikenyc.com/gbfs/en/station_status.json")
live
live$last_updated
live$ttl
#load("../output/bikeRoutes.RData")
stations
stations$ttl
stations$last_updated
#load("../output/bikeRoutes.RData")
stations
pairs_all
stations
stations$data
pairs_all
# Plot map and biking route
google_map(location = current,
zoom = 10) %>%
add_polylines(data = df_route1,
polyline = "polyline", stroke_colour = "#FF33D6") %>%
add_polylines(data = df_route2,
polyline = "polyline") %>%
add_polylines(data = df_route3,
polyline = "polyline", stroke_colour = "#FF33D6") %>%
add_traffic()
# Plot map and biking route
google_map(location = current,
zoom = 10) %>%
add_polylines(data = df_route1,
polyline = "polyline",
stroke_colour = "#FF33D6",
stroke_weight = 7) %>%
add_polylines(data = df_route2,
polyline = "polyline",
stroke_weight = 7) %>%
add_polylines(data = df_route3,
polyline = "polyline",
stroke_colour = "#FF33D6",
stroke_weight = 7) %>%
add_traffic()
stations$data
stations$data$stations$capacity
stations$data[1]
stations$data
live <- fromJSON(file = "https://gbfs.citibikenyc.com/gbfs/en/station_status.json")
stations <- fromJSON(file = "https://gbfs.citibikenyc.com/gbfs/en/station_information.json")
l <- length(stations$data$stations)
s <- data.frame(lat = rep(NA, l), lng <- rep(NA, l))
for(i in 1:l){
s$lat[i] <- stations$data$stations[i][[1]]$lat
s$lng[i] <- stations$data$stations[i][[1]]$lon
s$available[i] <- live$data$stations[i][[1]]$num_bikes_available
s$capacity[i] <- statsion$data$stations[i][[1]]$capacity
}
s
library(shiny)
library(rjson)
#library(leaflet)
#library(here)
#library(rgdal)
library(dplyr)
live <- fromJSON(file = "https://gbfs.citibikenyc.com/gbfs/en/station_status.json")
stations <- fromJSON(file = "https://gbfs.citibikenyc.com/gbfs/en/station_information.json")
l <- length(stations$data$stations)
s <- data.frame(lat = rep(NA, l), lng <- rep(NA, l))
for(i in 1:l){
s$lat[i] <- stations$data$stations[i][[1]]$lat
s$lng[i] <- stations$data$stations[i][[1]]$lon
s$available[i] <- live$data$stations[i][[1]]$num_bikes_available
s$capacity[i] <- statsion$data$stations[i][[1]]$capacity
}
<<<<<<< HEAD
for(i in 1:l){
s$lat[i] <- stations$data$stations[i][[1]]$lat
s$lng[i] <- stations$data$stations[i][[1]]$lon
s$available[i] <- live$data$stations[i][[1]]$num_bikes_available
s$capacity[i] <- stations$data$stations[i][[1]]$capacity
}
s
# Remove full bike stations
s_nonfull <- s[-c(which(s$available == s$capacity)),]
s_nonfull
pairs_all
runApp('~/Documents/GitHub/Fall2018-Project2-sec1_proj2_grp1/doc')
install.packages(leaflet.extras)
install.packages("leaflet.extras")
library(shiny)
library(rjson)
library(leaflet)
library(here)
library(rgdal)
library(chron)
library(leaflet.extras)
runApp('~/Documents/GitHub/Fall2018-Project2-sec1_proj2_grp1/doc')
runApp('~/Documents/GitHub/Fall2018-Project2-sec1_proj2_grp1/doc')
runApp('~/Documents/GitHub/Fall2018-Project2-sec1_proj2_grp1/doc')
setwd("~/Documents/GitHub/Fall2018-Project2-sec1_proj2_grp1")
crime <- read.csv("../data/NYPD.csv")
setwd("~/Documents/GitHub/Fall2018-Project2-sec1_proj2_grp1/data")
crime <- read.csv("../data/NYPD.csv")
crime <- read.csv("../data/NYPD.csv")
setwd
setwd("~/Documents/GitHub/Fall2018-Project2-sec1_proj2_grp1/data")
crime <- read.csv("~/Documents/GitHub/Fall2018-Project2-sec1_proj2_grp1/data/NYPD.csv")
pairs_nonfull
pairs_nonfull <- mapply(c, s_nonfull$lat, s_nonfull$lng, SIMPLIFY = FALSE)
pairs_nonfull
# Create pairs of lattitude and longitute for all bike stations
pairs_all <- as.matrix(mapply(c, s$lat, s$lng, SIMPLIFY = FALSE))
pairs_all
pairs_all
# Create pairs of lattitude and longitute for all bike stations
pairs_all <- mapply(c, s$lat, s$lng, SIMPLIFY = FALSE)
pairs_all
pairs_nonzero <- mapply(c, s_nonzero$lat, s_nonzero$lng, SIMPLIFY = FALSE)
pairs_nonzero
# Create pairs of lattitude and longitute for all bike stations
pairs_all <- data.frame(mapply(c, s$lat, s$lng, SIMPLIFY = FALSE))
pairs_all
# Create pairs of lattitude and longitute for all bike stations
pairs_all <- lapply(c, s$lat, s$lng, SIMPLIFY = FALSE)
# Create pairs of lattitude and longitute for all bike stations
pairs_all <- sapply(c, s$lat, s$lng, SIMPLIFY = FALSE)
# Create pairs of lattitude and longitute for all bike stations
pairs_all <- mapply(c, s$lat, s$lng, SIMPLIFY = FALSE)
pairs_all
do.call(Map, c(rbind, pairs_all))
pairs_all
as.data.frame(mapply(c, s$lat, s$lng, SIMPLIFY = FALSE))
# Create pairs of lattitude and longitute for all bike stations
pairs_all <- as.data.frame(mapply(c, s$lat, s$lng, SIMPLIFY = FALSE))[1,1]
as.data.frame(mapply(c, s$lat, s$lng, SIMPLIFY = FALSE))[1,1]
as.data.frame(mapply(c, s$lat, s$lng, SIMPLIFY = FALSE))[1,2]
list.as.matrix(mapply(c, s$lat, s$lng, SIMPLIFY = FALSE))
as.matrix(mapply(c, s$lat, s$lng, SIMPLIFY = FALSE))
mapply(c, s$lat, s$lng, SIMPLIFY = FALSE)[1]
mapply(c, s$lat, s$lng, SIMPLIFY = FALSE)[[1]]
class(mapply(c, s$lat, s$lng, SIMPLIFY = FALSE)[[1]])
as.matrix(mapply(c, s$lat, s$lng, SIMPLIFY = FALSE))
matrix(s$lat, s$lng)
cbind(s$lat, s$lng)
# Create pairs of lattitude and longitute for all bike stations
pairs_all <- mapply(c, s$lat, s$lng, SIMPLIFY = FALSE)
# Create pairs of lattitude and longitute for all bike stations
#pairs_all <- mapply(c, s$lat, s$lng, SIMPLIFY = FALSE)
pairs_all <- cbind(s$lat, s$lng)
#pairs_nonzero <- mapply(c, s_nonzero$lat, s_nonzero$lng, SIMPLIFY = FALSE)
pairs_nonzero <- cbind(s_nonzero$lat, s_nonzero$lng)
pairs_nonzero
#pairs_nonfull <- mapply(c, s_nonfull$lat, s_nonfull$lng, SIMPLIFY = FALSE)
pairs_nonfull <- cbind(s_nonfull$lat, s_nonfull$lng)
f <- data.format()
setwd("~/Documents/GitHub/Fall2018-Project2-sec1_proj2_grp1/doc")
f <- data.format()
f <- dataFormat()
dataFormat <- function(){
#library(shiny)
library(rjson)
#library(dplyr)
#library(googleway)
## Data Import
live <- fromJSON(file = "https://gbfs.citibikenyc.com/gbfs/en/station_status.json")
stations <- fromJSON(file = "https://gbfs.citibikenyc.com/gbfs/en/station_information.json")
#load("../output/bikeRoutes.RData")
## data handling
l <- length(stations$data$stations)
s <- data.frame(lat = rep(NA, l), lng <- rep(NA, l))
for(i in 1:l){
s$lat[i] <- stations$data$stations[i][[1]]$lat
s$lng[i] <- stations$data$stations[i][[1]]$lon
s$available[i] <- live$data$stations[i][[1]]$num_bikes_available
s$capacity[i] <- stations$data$stations[i][[1]]$capacity
}
# Remove 0 bikes stations
s_nonzero <- s[-c(which(s$available==0)),]
# Remove full bike stations
s_nonfull <- s[-c(which(s$available == s$capacity)),]
# User Input: current location and destination. current, destination
current <- "Columbia University, New York"  # set for illustration
destination <- "Time Square, New York"
# Create pairs of lattitude and longitute for all bike stations
pairs_all <- cbind(s$lat, s$lng)
pairs_nonzero <- cbind(s_nonzero$lat, s_nonzero$lng)
pairs_nonfull <- cbind(s_nonfull$lat, s_nonfull$lng)
return(list(all = pairs_all, nonzero = pairs_nonzero, nonfull = pairs_nonfull))
}
f <- dataFormat()
f
pairs_all
# mode: "current" or "destination"
c <- dataFormat()
c
coordinates <- c(40.71929 -73.94500)
c$nonzero
dist <- c$nonzero-coordinates
dist
coordinates <- c(40.71929, -73.94500)
dist <- c$nonzero-coordinates
dist
dist <- (c$nonzero-coordinates)*100
dist
c$nonzero-coordinates
c$nonzero[488,]
c$nonzero[480:488,]-coordinates
c$nonzero[480:488,]
c$nonzero[480:488,]-coordinates
c$nonzero[480:488,]
c$nonzero[486:488,]-coordinates
c$nonzero[486:488,]
coordinates
coordinates <- as.data.frame(c(40.71929, -73.94500))
coordinates
coordinates <- as.matrix(c(40.71929, -73.94500))
coordinates
coordinates <- as.matrix(c(40.71929, -73.94500), ncol = 2)
coordinates
class(c$nonzero)
coordinates <- data.frame((c(40.71929, -73.94500)))
coordinates <- data.frame((c(40.71929, -73.94500)))
coordinates
coordinates <- cbind(40.71929, -73.94500)
coordinates
c$nonzero[486:488,]-coordinates
c$nonzero[486:488,]
matrix(coordinates, nrow = nrow(c$nonzero), ncol = 2)
duplicate(coordinates, c$nonzero)
replicate(coordinates, c$nonzero)
nrow(c$nonzero)
replicate(coordinates, nrow(c$nonzero))
replicate(nrow(c$nonzero),coordinates)
treplicate(nrow(c$nonzero),coordinates)
t(replicate(nrow(c$nonzero),coordinates))
coordinates <- c(40.71929, -73.94500)
t(replicate(nrow(c$nonzero),coordinates))
c$nonzero[486:488,]-t(replicate(nrow(c$nonzero),coordinates))[1:3,]
dist <- (c$nonzero-t(replicate(nrow(c$nonzero),coordinates)))*100
dist
(c$nonzero-t(replicate(nrow(c$nonzero),coordinates)))
dist <- ((c$nonzero-t(replicate(nrow(c$nonzero),coordinates)))*100[1:3,])
(c$nonzero-t(replicate(nrow(c$nonzero),coordinates)))*100
dist <- ((c$nonzero-t(replicate(nrow(c$nonzero),coordinates)))*100)[1:3, ]
dist
dist <- ((c$nonzero-t(replicate(nrow(c$nonzero),coordinates)))*100)^2
dist
(((c$nonzero-t(replicate(nrow(c$nonzero),coordinates)))*100)[1:3,])^2
(((c$nonzero-t(replicate(nrow(c$nonzero),coordinates)))*100)[1:3,])
matrix(1:9, nrow = 3)
(matrix(1:9, nrow = 3))^2
(((c$nonzero-t(replicate(nrow(c$nonzero),coordinates)))*100))^2
(((c$nonzero-t(replicate(nrow(c$nonzero),coordinates)))*100))
dist <- (((c$nonzero-t(replicate(nrow(c$nonzero),coordinates)))*100))^2
dist
dist <- rowSums((((c$nonzero-t(replicate(nrow(c$nonzero),coordinates)))*100))^2)
dist
nearest_i <- which.min(dist)
nearest_i
nearest_station <- c$nonzero[which.min(dist),]
nearest_station
c <- dataFormat() # read live stations info
dist <- rowSums((((c$nonzero-t(replicate(nrow(c$nonzero),coordinates)))*100))^2)
nearest_station <- c$nonzero[which.min(dist),]
nearest_station
dist <- rowSums((((c$nonfull-t(replicate(nrow(c$nonfull),coordinates)))*100))^2)
nearest_station <- c$nonfull[which.min(dist),]
nearest_station
coordinates
c$nonfull-t(replicate(nrow(c$nonfull)
$nonfull-t(replicate(nrow(c$nonfull),coordinates)
c$nonfull-t(replicate(nrow(c$nonfull),coordinates)
t(replicate(nrow(c$nonfull),coordinates)
t(replicate(nrow(c$nonfull),coordinates))
c$nonfull-t(replicate(nrow(c$nonfull),coordinates))
(c$nonfull-t(replicate(nrow(c$nonfull),coordinates)))*100
((c$nonfull-t(replicate(nrow(c$nonfull),coordinates)))*100)^2
s
=======
mywaypoints = list(c(40.74119, -73.9925), c(40.73573, -73.99302))
map$addAssets(
css = "http://www.liedman.net/leaflet-routing-machine/dist/leaflet-routing-machine.css",
jshead = "http://www.liedman.net/leaflet-routing-machine/dist/leaflet-routing-machine.min.js"
)
routingTemplate = "
<script>
var mywaypoints = %s
L.Routing.control({
waypoints: [
L.latLng.apply(null, mywaypoints[0]),
L.latLng.apply(null, mywaypoints[1])
]
}).addTo(map);
</script>"
map$setTemplate(
afterScript = sprintf(routingTemplate, RJSONIO::toJSON(mywaypoints))
)
map$set(width = 1450, height = 800)
map
shiny::runApp('Documents/GitHub/Fall2018-Project2-sec1_proj2_grp1/doc')
runApp('Documents/GitHub/Fall2018-Project2-sec1_proj2_grp1/doc')
runApp('Documents/GitHub/Fall2018-Project2-sec1_proj2_grp1/doc')
interaction.plot("here")
install.packages("here")
runApp('Documents/GitHub/Fall2018-Project2-sec1_proj2_grp1/doc')
install.packages("rgdal")
runApp('Documents/GitHub/Fall2018-Project2-sec1_proj2_grp1/doc')
runApp('Documents/GitHub/Fall2018-Project2-sec1_proj2_grp1/doc')
shiny::runApp('Documents/GitHub/Fall2018-Project2-sec1_proj2_grp1/doc')
runApp('Documents/GitHub/Fall2018-Project2-sec1_proj2_grp1/doc')
runApp('Documents/GitHub/Fall2018-Project2-sec1_proj2_grp1/doc')
runApp('Documents/GitHub/Fall2018-Project2-sec1_proj2_grp1/doc')
runApp('Documents/GitHub/Fall2018-Project2-sec1_proj2_grp1/doc')
runApp('Documents/GitHub/Fall2018-Project2-sec1_proj2_grp1/doc')
runApp('Documents/GitHub/Fall2018-Project2-sec1_proj2_grp1/doc')
runApp('Documents/GitHub/Fall2018-Project2-sec1_proj2_grp1/doc')
runApp('Documents/GitHub/Fall2018-Project2-sec1_proj2_grp1/doc')
runApp('Documents/GitHub/Fall2018-Project2-sec1_proj2_grp1/doc')
runApp('Documents/GitHub/Fall2018-Project2-sec1_proj2_grp1/doc')
runApp('Documents/GitHub/Fall2018-Project2-sec1_proj2_grp1/doc')
runApp('Documents/GitHub/Fall2018-Project2-sec1_proj2_grp1/doc')
library(shiny)
if (interactive()) {
ui <- fluidPage(
checkboxGroupInput("variable", "Variables to show:",
c("Cylinders" = "cyl",
"Transmission" = "am",
"Gears" = "gear")),
tableOutput("data")
)
server <- function(input, output) {
output$data <- renderTable({
mtcars[, c("mpg", input$variable), drop = FALSE]
}, rownames = TRUE)
}
shinyApp(ui, server)
}
shiny::runApp('Documents/GitHub/Fall2018-Project2-sec1_proj2_grp1/doc')
install.packages("leaflet.extras")
runApp('Documents/GitHub/Fall2018-Project2-sec1_proj2_grp1/doc')
runApp('Documents/GitHub/Fall2018-Project2-sec1_proj2_grp1/doc')
runApp('Documents/GitHub/Fall2018-Project2-sec1_proj2_grp1/doc')
runApp('Documents/GitHub/Fall2018-Project2-sec1_proj2_grp1/doc')
runApp('Documents/GitHub/Fall2018-Project2-sec1_proj2_grp1/doc')
setwd("~/Documents/GitHub/Fall2018-Project2-sec1_proj2_grp1/doc")
runApp()
install.packages("chron")
install.packages("chron")
install.packages("rgdal")
install.packages("rgdal")
runApp()
runApp()
runApp()
runApp()
setwd("~/Documents/GitHub/Fall2018-Project2-sec1_proj2_grp1/doc")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("profvis")
library(profvis)
profvis(runApp())
library(profvis)
profvis(runApp())
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
dashboardBody(
tabItems(
# First tab content
tabItem(tabName = "dashboard",
fluidRow(
box(plotOutput("plot1", height = 250)),
box(
title = "Controls",
sliderInput("slider", "Number of observations:", 1, 100, 50)
)
)
),
# Second tab content
tabItem(tabName = "widgets",
h2("Widgets tab content")
)
)
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
output$tableLive <- renderDataTable(live)
output$tableStations <- renderDataTable(stations)
output$tablecrime <- renderDataTable(crime)
runApp()
runApp()
output$tableLive <- renderDataTable(live)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
>>>>>>> 6c6026de699464234a8d43d2b18aa60362f733fd
