#     icon: 'bus',
#     borderColor: '#00ABDC',
#     textColor: '#00ABDC'
#   };
#   L.marker([40.758896, -73.985130], {
#     icon: L.BeautifyIcon.icon(options),
#     draggable: true
#   }).addTo(this).bindPopup('I am Beautify');
# }") %>%
addMarkers(icon=~markers[s$available + 1]
, clusterOptions = markerClusterOptions()
) %>%
addPolygons(data=routes,weight=1, col = 'green',
smoothFactor = 100, group = "bike routes") %>%
addWMSTiles(
"http://mesonet.agron.iastate.edu/cgi-bin/wms/nexrad/n0r.cgi",
layers = "nexrad-n0r-900913",
options = WMSTileOptions(format = "image/png", transparent = TRUE),
attribution = "Weather data ?? 2012 IEM Nexrad",
group = "rain radar"
# make it transparanet
)%>%
addLayersControl(
baseGroups = c("crimes - morning", "crimes - afternoon","crimes - evening",'crimes - night'),
overlayGroups = c("bike routes", "rain radar"),
options = layersControlOptions(collapsed = FALSE)) %>%
addWebGLHeatmap(data = c1, lng = ~Longitude, lat = ~Latitude,
size = 700, opacity = 0.6, group = "crimes - morning") %>%
addWebGLHeatmap(data = c2, lng = ~Longitude, lat = ~Latitude,
size = 700, opacity = 0.6, group = "crimes - afternoon") %>%
addWebGLHeatmap(data = c3, lng = ~Longitude, lat = ~Latitude,
size = 700, opacity = 0.6, group = "crimes - evening") %>%
addWebGLHeatmap(data = c4, lng = ~Longitude, lat = ~Latitude,
size = 700, opacity = 0.6, group = "crimes - night") %>%
hideGroup(c("bike routes", "crimes - morning", "crimes - afternoon","crimes - evening",'crimes - night', "rain radar"))
s %>%
leaflet() %>%
addProviderTiles(providers$Stamen.Toner) %>%
# registerPlugin(markerPlugin) %>%
# # Add your custom JS logic here. The `this` keyword
# # refers to the Leaflet (JS) map object.
# onRender("function(el, x) {
#   var options = {
#     icon: 'bus',
#     borderColor: '#00ABDC',
#     textColor: '#00ABDC'
#   };
#   L.marker([40.758896, -73.985130], {
#     icon: L.BeautifyIcon.icon(options),
#     draggable: true
#   }).addTo(this).bindPopup('I am Beautify');
# }") %>%
addMarkers(icon=~markers[s$available + 1]
, clusterOptions = markerClusterOptions()
) %>%
addPolygons(data=routes, weight=1, col = 'green',
smoothFactor = 1000, group = "bike routes",
fillOpacity = 1) %>%
addWMSTiles(
"http://mesonet.agron.iastate.edu/cgi-bin/wms/nexrad/n0r.cgi",
layers = "nexrad-n0r-900913",
options = WMSTileOptions(format = "image/png", transparent = TRUE),
attribution = "Weather data ?? 2012 IEM Nexrad",
group = "rain radar"
# make it transparanet
)%>%
addLayersControl(
baseGroups = c("crimes - morning", "crimes - afternoon","crimes - evening",'crimes - night'),
overlayGroups = c("bike routes", "rain radar"),
options = layersControlOptions(collapsed = FALSE)) %>%
addWebGLHeatmap(data = c1, lng = ~Longitude, lat = ~Latitude,
size = 700, opacity = 0.6, group = "crimes - morning") %>%
addWebGLHeatmap(data = c2, lng = ~Longitude, lat = ~Latitude,
size = 700, opacity = 0.6, group = "crimes - afternoon") %>%
addWebGLHeatmap(data = c3, lng = ~Longitude, lat = ~Latitude,
size = 700, opacity = 0.6, group = "crimes - evening") %>%
addWebGLHeatmap(data = c4, lng = ~Longitude, lat = ~Latitude,
size = 700, opacity = 0.6, group = "crimes - night") %>%
hideGroup(c("bike routes", "crimes - morning", "crimes - afternoon","crimes - evening",'crimes - night', "rain radar"))
s %>%
leaflet() %>%
addProviderTiles(providers$Stamen.Toner) %>%
# registerPlugin(markerPlugin) %>%
# # Add your custom JS logic here. The `this` keyword
# # refers to the Leaflet (JS) map object.
# onRender("function(el, x) {
#   var options = {
#     icon: 'bus',
#     borderColor: '#00ABDC',
#     textColor: '#00ABDC'
#   };
#   L.marker([40.758896, -73.985130], {
#     icon: L.BeautifyIcon.icon(options),
#     draggable: true
#   }).addTo(this).bindPopup('I am Beautify');
# }") %>%
addMarkers(icon=~markers[s$available + 1]
, clusterOptions = markerClusterOptions()
) %>%
addPolygons(data=routes, weight=1, col = 'green',
smoothFactor = 1000, group = "bike routes",
opacity = 1) %>%
addWMSTiles(
"http://mesonet.agron.iastate.edu/cgi-bin/wms/nexrad/n0r.cgi",
layers = "nexrad-n0r-900913",
options = WMSTileOptions(format = "image/png", transparent = TRUE),
attribution = "Weather data ?? 2012 IEM Nexrad",
group = "rain radar"
# make it transparanet
)%>%
addLayersControl(
baseGroups = c("crimes - morning", "crimes - afternoon","crimes - evening",'crimes - night'),
overlayGroups = c("bike routes", "rain radar"),
options = layersControlOptions(collapsed = FALSE)) %>%
addWebGLHeatmap(data = c1, lng = ~Longitude, lat = ~Latitude,
size = 700, opacity = 0.6, group = "crimes - morning") %>%
addWebGLHeatmap(data = c2, lng = ~Longitude, lat = ~Latitude,
size = 700, opacity = 0.6, group = "crimes - afternoon") %>%
addWebGLHeatmap(data = c3, lng = ~Longitude, lat = ~Latitude,
size = 700, opacity = 0.6, group = "crimes - evening") %>%
addWebGLHeatmap(data = c4, lng = ~Longitude, lat = ~Latitude,
size = 700, opacity = 0.6, group = "crimes - night") %>%
hideGroup(c("bike routes", "crimes - morning", "crimes - afternoon","crimes - evening",'crimes - night', "rain radar"))
s %>%
leaflet() %>%
addProviderTiles(providers$Stamen.Toner) %>%
# registerPlugin(markerPlugin) %>%
# # Add your custom JS logic here. The `this` keyword
# # refers to the Leaflet (JS) map object.
# onRender("function(el, x) {
#   var options = {
#     icon: 'bus',
#     borderColor: '#00ABDC',
#     textColor: '#00ABDC'
#   };
#   L.marker([40.758896, -73.985130], {
#     icon: L.BeautifyIcon.icon(options),
#     draggable: true
#   }).addTo(this).bindPopup('I am Beautify');
# }") %>%
addMarkers(icon=~markers[s$available + 1]
, clusterOptions = markerClusterOptions()
) %>%
addPolygons(data=routes, weight=1, col = 'green',
smoothFactor = 1000, group = "bike routes",
opacity = 1, noClip = T) %>%
addWMSTiles(
"http://mesonet.agron.iastate.edu/cgi-bin/wms/nexrad/n0r.cgi",
layers = "nexrad-n0r-900913",
options = WMSTileOptions(format = "image/png", transparent = TRUE),
attribution = "Weather data ?? 2012 IEM Nexrad",
group = "rain radar"
# make it transparanet
)%>%
addLayersControl(
baseGroups = c("crimes - morning", "crimes - afternoon","crimes - evening",'crimes - night'),
overlayGroups = c("bike routes", "rain radar"),
options = layersControlOptions(collapsed = FALSE)) %>%
addWebGLHeatmap(data = c1, lng = ~Longitude, lat = ~Latitude,
size = 700, opacity = 0.6, group = "crimes - morning") %>%
addWebGLHeatmap(data = c2, lng = ~Longitude, lat = ~Latitude,
size = 700, opacity = 0.6, group = "crimes - afternoon") %>%
addWebGLHeatmap(data = c3, lng = ~Longitude, lat = ~Latitude,
size = 700, opacity = 0.6, group = "crimes - evening") %>%
addWebGLHeatmap(data = c4, lng = ~Longitude, lat = ~Latitude,
size = 700, opacity = 0.6, group = "crimes - night") %>%
hideGroup(c("bike routes", "crimes - morning", "crimes - afternoon","crimes - evening",'crimes - night', "rain radar"))
l <- length(stations$data$stations)
s <- data.frame(lat = rep(NA, l), lng <- rep(NA, l))
for(i in 1:l){
s$lat[i] <- stations$data$stations[i][[1]]$lat
s$lng[i] <- stations$data$stations[i][[1]]$lon
s$available[i] <- live$data$stations[i][[1]]$num_bikes_available
}
l <- length(stations$data$stations)
s <- data.frame(lat = rep(NA, l), lng = rep(NA, l))
for(i in 1:l){
s$lat[i] <- stations$data$stations[i][[1]]$lat
s$lng[i] <- stations$data$stations[i][[1]]$lon
s$available[i] <- live$data$stations[i][[1]]$num_bikes_available
}
persp(s)
plot(s)
library(plot3D)
install.packages("plot3D")
hist3D(s)
library(plot3D)
hist3D(s)
hist3D(z = s)
x_c <- cut(s$lat, 20)
y_c <- cut(s$lng, 20)
z <- table(x_c, y_c)
hist3D(z = s)
z
z <- as.matrix(table(x_c, y_c))
hist3D(z = s)
z <- table(x_c, y_c)
hist3D(z = z)
x_c <- cut(s$lat, 10)
y_c <- cut(s$lng, 10)
z <- table(x_c, y_c)
hist3D(z = z)
x_c <- cut(s$lat, 40)
y_c <- cut(s$lng, 40)
z <- table(x_c, y_c)
hist3D(z = z)
hist3D(z = as.matrix(s))
a <- read.csv(file.choose())
View(a)
runApp()
install.packages("mapsapi")
runApp()
x_c <- cut(s$lat, 100)
y_c <- cut(s$lng, 100)
z <- table(x_c, y_c)
hist3D(z = as.matrix(s))
hist3D(z = z)
library(car)
scatter3D(s)
scatter3D(s$lat, s$lng)
scatter3D(s$lat, s$lng, s$available)
scatter3d(s$lat, s$lng, s$available)
install.packages("rgl")
library(rgl)
scatter3d(s$lat, s$lng, s$available)
scatter3d(s$lat, s$lng, s$available)
scatter3d(s$lng, s$available, s$lat)
scatter3d(s$lng, s$available, s$lat)
scatter3d(s$lng, s$available, s$lat)
scatter3d(s$lng, s$available, s$lat)
hist3D(z = z)
hist3D_fancy(iris$Sepal.Length, iris$Petal.Width, colvar=as.numeric(iris$Species))
hist3D(iris$Sepal.Length, iris$Petal.Width, colvar=as.numeric(iris$Species))
library(plot3D)
hist3D(iris$Sepal.Length, iris$Petal.Width, colvar=as.numeric(iris$Species))
hist3D_fancy(iris$Sepal.Length, iris$Petal.Width, colvar=as.numeric(iris$Species))
scatter3D(x, y,
z = rep(-max(z)/2, length.out = length(x)),
colvar = colvar, col = gg.col(100),
add = TRUE, pch = 18, clab = clab,
colkey = list(length = 0.5, width = 0.5,
dist = 0.05, cex.axis = 0.8, cex.clab = 0.8)
hist3D_fancy(iris$Sepal.Length, iris$Petal.Width, colvar=as.numeric(iris$Species))
# street felonies in Manhattan
crime.m <- subset(crime, crime$BORO_NM=="MANHATTAN")
crime.m.f <- subset(crime.m, crime.m$LAW_CAT_CD=="FELONY")
crime.m.f$date <- as.Date(crime.m.f$CMPLNT_FR_DT, format = "%m/%d/%Y")
# Only 2018
# cd<- subset(crime.m.f, date> "2017-12-31" & date < "2018-12-05")
# Only street crime
c.street <- subset(crime.m.f, crime.m.f$PREM_TYP_DESC=="STREET")
crime.m.f$date <- as.Date(crime.m.f$CMPLNT_FR_DT, format = "%m/%d/%Y")
c.street$time <- as.POSIXct(as.character(c.street$CMPLNT_FR_TM), format = "%H:%M")
c.street$time <- chron(times. = as.character(c.street$CMPLNT_FR_TM))
c.street$t <- c.street$time
c.street$t <- as.character(c.street$t)
c.street$t[c.street$time > "6:00:00" & c.street$time <"12:00:00"] <- "morning"
c.street$t[c.street$time >= "12:00:00" & c.street$time <"18:00:00"] <- "afternoon"
c.street$t[c.street$time >= "18:00:00" & c.street$time <"23:59:59"] <- "evening"
c.street$t[c.street$time >= "0:00:00" & c.street$time <="6:00:00"] <- "night"
c1 <- subset(c.street, c.street$t=="morning")
c2 <- subset(c.street, c.street$t=="afternoon")
c3 <- subset(c.street, c.street$t=="evening")
c4 <- subset(c.street, c.street$t=="night")
# Define server logic required to draw a histogram
shinyServer(function(input, output, session) {
output$map <- renderLeaflet({
s %>%
leaflet() %>%
addProviderTiles(providers$Stamen.Toner) %>%
addMarkers(icon=~markers[s$available + 1]
, clusterOptions = markerClusterOptions()
) %>%
addPolygons(data=routes, weight=1, col = 'green',
smoothFactor = 1000, group = "bike routes",
opacity = 1, noClip = T) %>%
# addWMSTiles(
#   "http://mesonet.agron.iastate.edu/cgi-bin/wms/nexrad/n0r.cgi",
#   layers = "nexrad-n0r-900913",
#   options = WMSTileOptions(format = "image/png", transparent = TRUE),
#   attribution = "Weather data ?? 2012 IEM Nexrad",
#   group = "rain radar"
#   # make it transparanet
# )%>%
addLayersControl(
baseGroups = c("crimes - morning", "crimes - afternoon","crimes - evening",'crimes - night'),
overlayGroups = c("bike routes"
# , "rain radar"
),
options = layersControlOptions(collapsed = FALSE)) %>%
addWebGLHeatmap(data = c1, lng = ~Longitude, lat = ~Latitude,
size = 700, opacity = 0.6, group = "crimes - morning") %>%
addWebGLHeatmap(data = c2, lng = ~Longitude, lat = ~Latitude,
size = 700, opacity = 0.6, group = "crimes - afternoon") %>%
addWebGLHeatmap(data = c3, lng = ~Longitude, lat = ~Latitude,
size = 700, opacity = 0.6, group = "crimes - evening") %>%
addWebGLHeatmap(data = c4, lng = ~Longitude, lat = ~Latitude,
size = 700, opacity = 0.6, group = "crimes - night") %>%
hideGroup(c("bike routes", "crimes - morning", "crimes - afternoon","crimes - evening",'crimes - night'
# , "rain radar"
))
})
routing_config = reactive({
start = input$start
destination = input$destination
submit = input$submit
return(list(start = start, destination = destination, submit = submit))
})
observe(
if(input$submit[1] > 0){
leafletProxy("map") %>%
routing(strt = input$start, dstn = input$destination, c = c)
}
)
output$tableLive <- DT::renderDataTable({s})
output$tableCrime <- DT::renderDataTable({crime})
})
hist3D_fancy<- function(x, y, break.func = c("Sturges", "scott", "FD"), breaks = NULL,
colvar = NULL, col="white", clab=NULL, phi = 5, theta = 25, ...){
# Compute the number of classes for a histogram
break.func <- break.func [1]
if(is.null(breaks)){
x.breaks <- switch(break.func,
Sturges = nclass.Sturges(x),
scott = nclass.scott(x),
FD = nclass.FD(x))
y.breaks <- switch(break.func,
Sturges = nclass.Sturges(y),
scott = nclass.scott(y),
FD = nclass.FD(y))
} else x.breaks <- y.breaks <- breaks
# Cut x and y variables in bins for counting
x.bin <- seq(min(x), max(x), length.out = x.breaks)
y.bin <- seq(min(y), max(y), length.out = y.breaks)
xy <- table(cut(x, x.bin), cut(y, y.bin))
z <- xy
xmid <- 0.5*(x.bin[-1] + x.bin[-length(x.bin)])
ymid <- 0.5*(y.bin[-1] + y.bin[-length(y.bin)])
oldmar <- par("mar")
par (mar = par("mar") + c(0, 0, 0, 2))
hist3D(x = xmid, y = ymid, z = xy, ...,
zlim = c(-max(z)/2, max(z)), zlab = "counts", bty= "g",
phi = phi, theta = theta,
shade = 0.2, col = col, border = "black",
d = 1, ticktype = "detailed")
scatter3D(x, y,
z = rep(-max(z)/2, length.out = length(x)),
colvar = colvar, col = gg.col(100),
add = TRUE, pch = 18, clab = clab,
colkey = list(length = 0.5, width = 0.5,
dist = 0.05, cex.axis = 0.8, cex.clab = 0.8)
)
par(mar = oldmar)
}
hist3D_fancy(iris$Sepal.Length, iris$Petal.Width, colvar=as.numeric(iris$Species))
hist3D_fancy(s$lng, s$lat, colvar=as.numeric(s$available))
live <- fromJSON(file = "https://gbfs.citibikenyc.com/gbfs/en/station_status.json")
stations <- fromJSON(file = "https://gbfs.citibikenyc.com/gbfs/en/station_information.json")
packages <- c("shiny",
"rjson",
"leaflet",
"rgdal",
"chron",
"leaflet.extras")
package.check <- lapply(packages, FUN = function(x) {
if (!require(x, character.only = T)) install.packages(x)
if (! (x %in% (.packages() )))  library(x, character.only = T)
})
live <- fromJSON(file = "https://gbfs.citibikenyc.com/gbfs/en/station_status.json")
stations <- fromJSON(file = "https://gbfs.citibikenyc.com/gbfs/en/station_information.json")
l <- length(stations$data$stations)
s <- data.frame(lat = rep(NA, l), lng = rep(NA, l))
for(i in 1:l){
s$lat[i] <- stations$data$stations[i][[1]]$lat
s$lng[i] <- stations$data$stations[i][[1]]$lon
s$available[i] <- live$data$stations[i][[1]]$num_bikes_available
s$capacity <- stations$data$stations[i][[1]]$capacity
}
hist3D_fancy(s$lng, s$lat, colvar=as.numeric(s$available))
hist3D_fancy(s$lng, s$lat, colvar=as.numeric(s$available)  breaks = 30)
hist3D_fancy(s$lng, s$lat, colvar=as.numeric(s$available),  breaks = 30)
install.packages("plot3Drgl")
plotrgl()
library("plot3Drgl")
hist3D_fancy(s$lng, s$lat, colvar=as.numeric(s$available),  breaks = 30)
plotrgl()
runApp()
runApp()
runApp()
runApp()
runApp()
scatter3d(x=cars$speed, y=cars$dist, z=cars$time, surface=FALSE, ellipsoid = TRUE)
library(rgl)
hist3D_fancy(s$lng, s$lat, colvar=as.numeric(s$available),  breaks = 30)
rgl.open(useNULL=T)
hist3D_fancy(s$lng, s$lat, colvar=as.numeric(s$available),  breaks = 30)
scatter3d(x=cars$speed, y=cars$dist, z=cars$time, surface=FALSE, ellipsoid = TRUE)
rgl.open(useNULL=F)
hist3D_fancy(s$lng, s$lat, colvar=as.numeric(s$available),  breaks = 30)
library(rgl)
scatter3D(x=cars$speed, y=cars$dist, z=cars$time, surface=FALSE, ellipsoid = TRUE)
library(car)
scatter3d(x=cars$speed, y=cars$dist, z=cars$time, surface=FALSE, ellipsoid = TRUE)
hist3D_fancy(s$lng, s$lat, colvar=as.numeric(s$available),  breaks = 30)
scatter3d(x=cars$speed, y=cars$dist, z=cars$time, surface=FALSE, ellipsoid = TRUE)
cars$speed
cars$time
cars$time <- cars$dist/cars$speed
scatter3d(x=cars$speed, y=cars$dist, z=cars$time, surface=FALSE, ellipsoid = TRUE)
runApp()
runApp()
hist3D_fancy(s$lng, s$lat, colvar=as.numeric(s$available),  breaks = 30)
plotrgl(new = F)
plotrgl()
plotrgl(new = F)
scatter3d(x=cars$speed, y=cars$dist, z=cars$time, surface=FALSE, ellipsoid = TRUE)
rglwidget()
hist3D_fancy(s$lng, s$lat, colvar=as.numeric(s$available),  breaks = 30)
plotrgl(new = F)
rglwidget()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
# ##  Create cuts:
# x_c <- cut(s$lat, 100)
# y_c <- cut(s$lng, 100)
#
# ##  Calculate joint counts at cut levels:
# z <- table(x_c, y_c)
#
library(plot3D)
#
# library(car)
# library(rgl)
#
# hist3D(z = z)
#
# scatter3d(s$lng, s$available, s$lat)
#
hist3D_fancy<- function(x, y, break.func = c("Sturges", "scott", "FD"), breaks = NULL,
colvar = NULL, col="white", clab=NULL, phi = 5, theta = 25, ...){
# Compute the number of classes for a histogram
break.func <- break.func [1]
if(is.null(breaks)){
x.breaks <- switch(break.func,
Sturges = nclass.Sturges(x),
scott = nclass.scott(x),
FD = nclass.FD(x))
y.breaks <- switch(break.func,
Sturges = nclass.Sturges(y),
scott = nclass.scott(y),
FD = nclass.FD(y))
} else x.breaks <- y.breaks <- breaks
# Cut x and y variables in bins for counting
x.bin <- seq(min(x), max(x), length.out = x.breaks)
y.bin <- seq(min(y), max(y), length.out = y.breaks)
xy <- table(cut(x, x.bin), cut(y, y.bin))
z <- xy
xmid <- 0.5*(x.bin[-1] + x.bin[-length(x.bin)])
ymid <- 0.5*(y.bin[-1] + y.bin[-length(y.bin)])
# oldmar <- par("mar")
# par (mar = par("mar") + c(0, 0, 0, 2))
hist3D(x = xmid, y = ymid, z = xy, ...,
zlim = c(-max(z)/2, max(z)), zlab = "counts", bty= "g",
phi = phi, theta = theta,
shade = 0.2, col = col, border = "black",
d = 1, ticktype = "detailed")
# scatter3D(x, y,
#           z = rep(-max(z)/2, length.out = length(x)),
#           colvar = colvar, col = gg.col(100),
#           add = TRUE, pch = 18, clab = clab,
#           colkey = list(length = 0.5, width = 0.5,
#                         dist = 0.05, cex.axis = 0.8, cex.clab = 0.8)
# )
# par(mar = oldmar)
}
runApp()
runApp()
runApp()
install.packages('rsconnect')
rsconnect::setAccountInfo(name='gabriben', token='4BC30E886C7223171C18236A41835C6A', secret='4sKkXKNGNqjBBZliJitAJLtbTZZ8UUJxFddNjQWa')
library(rsconnect)
runApp()
install.packages("shinydashboard")
install.packages("shinydashboard")
library(shinydashboard)
library(shinydashboard)
packages <- c("shiny",
"shinydashboard",
"rjson",
"leaflet",
"rgdal",
"chron",
"leaflet.extras",
"rgl",
"plot3Drgl")
FUN = function(x)
{library(x, character.only = T)}
packages()
.packages()
detach("package:plot3Drgl", unload=TRUE)
package.check <- lapply(packages, FUN = function(x)
{library(x, character.only = T)})
shiny::runApp()
install.packages("mzR")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
