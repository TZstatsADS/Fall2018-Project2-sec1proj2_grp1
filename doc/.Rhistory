, origin = x[['origin']]
, destination = x[['destination']]
)
df_result <- data.frame(
origin = x[['origin']]
, destination = x[['destination']]
, route = res$routes$overview_polyline$points
)
return(df_result)
})
library(shiny)
library(shinydashboard)
library(googleway)
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(),
dashboardBody(
textInput(inputId = "origin", label = "Origin"),
textInput(inputId = "destination", label = "Destination"),
actionButton(inputId = "getRoute", label = "Get Rotue"),
google_mapOutput("myMap")
)
)
server <- function(input, output){
api_key <- "your_directions_api_key"
map_key <- "your_maps_api_key"
df_route <- eventReactive(input$getRoute,{
print("getting route")
o <- input$origin
d <- input$destination
return(data.frame(origin = o, destination = d, stringsAsFactors = F))
})
output$myMap <- renderGoogle_map({
df <- df_route()
print(df)
if(df$origin == "" | df$destination == "")
return()
res <- google_directions(
key = api_key
, origin = df$origin
, destination = df$destination
)
df_route <- data.frame(route = res$routes$overview_polyline$points)
google_map(key = map_key ) %>%
add_polylines(data = df_route, polyline = "route")
})
}
shinyApp(ui, server)
library(shiny)
library(googleway)
ui <- fluidPage(google_mapOutput("map"))
server <- function(input, output, session){
api_key <- "your_api_key"
output$map <- renderGoogle_map({
google_map(key = api_key)
})
}
shinyApp(ui, server)
## Not run:
library(shiny)
library(googleway)
ui <- fluidPage(google_mapOutput("map"))
server <- function(input, output, session){
api_key <- "your_api_key"
output$map <- renderGoogle_map({
google_map(key = api_key)
})
}
shinyApp(ui, server)
#Data
y <- c(199.0,205.0,196.0,200.0,218.0,220.0,215.0,223.0,237.0,234.0,235.0,230.0,250.0,248.0,253.0,246.0)
x <- c(rep(16,4),rep(24,4),rep(32,4),rep(40,4))
lm(y~x)
#Data
y <- c(199.0,205.0,196.0,200.0,218.0,220.0,215.0,223.0,237.0,234.0,235.0,230.0,250.0,248.0,253.0,246.0)
x <- c(rep(16,4),rep(24,4),rep(32,4),rep(40,4))
model <- lm(y~x)
t.test(model,conf.level = 0.99)
#Data
y <- c(199.0,205.0,196.0,200.0,218.0,220.0,215.0,223.0,237.0,234.0,235.0,230.0,250.0,248.0,253.0,246.0)
x <- c(rep(16,4),rep(24,4),rep(32,4),rep(40,4))
model <- lm(y~x)
t.test(x,conf.level = 0.99)
#Data
y <- c(199.0,205.0,196.0,200.0,218.0,220.0,215.0,223.0,237.0,234.0,235.0,230.0,250.0,248.0,253.0,246.0)
x <- c(rep(16,4),rep(24,4),rep(32,4),rep(40,4))
model <- lm(y~x)
t.test(y,x,conf.level = 0.99)
y <- c(199.0,205.0,196.0,200.0,218.0,220.0,215.0,223.0,237.0,234.0,235.0,230.0,250.0,248.0,253.0,246.0)
x <- c(rep(16,4),rep(24,4),rep(32,4),rep(40,4))
model <- lm(y~x)
model
#Data
y <- c(199.0,205.0,196.0,200.0,218.0,220.0,215.0,223.0,237.0,234.0,235.0,230.0,250.0,248.0,253.0,246.0)
x <- c(rep(16,4),rep(24,4),rep(32,4),rep(40,4))
model <- lm(y~x)
t.test(x,y,conf.level = 0.99)
#Data
y <- c(199.0,205.0,196.0,200.0,218.0,220.0,215.0,223.0,237.0,234.0,235.0,230.0,250.0,248.0,253.0,246.0)
x <- c(rep(16,4),rep(24,4),rep(32,4),rep(40,4))
model <- lm(y~x)
t.test(y,x,conf.level = 0.99)
model <- lm(y~x)
model
model <- lm(y~x)
model
t.test(y,x,conf.level = 0.99)
model <- lm(y~x)
summary(model)
model <- lm(y~x)
#summary(model)
confint(model, 'x', level=0.99)
fit <- aov(y~x)
summary(fit)
shiny::runApp('Documents/GitHub/Fall2018-Project2-sec1_proj2_grp1/doc')
library(shiny)
library(googleway)
ui <- navbarPage("APP NAME", position = c("static-top"),tabPanel("MAP",
google_mapOutput(outputId = "mapWarsaw"),
textInput(inputId = "origin", label = "Departure point"),
textInput(inputId = "waypoint", label = "Waypoint 1"),
textInput(inputId = "waypoint2", label = "Waypoint 2"),
textInput(inputId = "destination", label = "Destination point"),
actionButton(inputId = "getRoute", label = "Get Route")
)
)
server <- function(input, output, session) {
map_key <- "MAP_KEY"
api_key <- "API_KEY"
output$mapWarsaw <- renderGoogle_map({
google_map(key = map_key,
search_box = TRUE,
scale_control = TRUE,
height = 1000) %>%
add_traffic()
})
observeEvent(input$getRoute,{
print("getting route")
o <- input$origin
w <- input$waypoint
q <- input$waypoint2
d <- input$destination
res <- google_directions(key = api_key,
origin = o,
waypoints = list(stop = w,
stop = q),
destination = d,
optimise_waypoints = TRUE,
mode = "driving")
df_route <- data.frame(route = res$routes$overview_polyline$points)
df_way <- cbind(
res$routes$legs[[1]]$end_location,
data.frame(address = res$routes$legs[[1]]$end_address)
)
df_way$order <- as.character(1:nrow(df_way))
google_map_update(map_id = "mapWarsaw") %>%
clear_traffic() %>%
clear_polylines() %>%
clear_markers() %>%
add_traffic() %>%
add_polylines(data = df_route,
polyline = "route",
stroke_colour = "#FF33D6",
stroke_weight = 7,
stroke_opacity = 0.7,
info_window = "New route",
load_interval = 100) %>%
add_markers(data = df_way,
info_window = "end_address",
label = "order")
})
}
shinyApp(ui, server)
runApp('Documents/GitHub/Fall2018-Project2-sec1_proj2_grp1/doc')
library(shiny)
library(googleway)
ui <- navbarPage("APP NAME", position = c("static-top"),tabPanel("MAP",
google_mapOutput(outputId = "mapWarsaw"),
textInput(inputId = "origin", label = "Departure point"),
textInput(inputId = "waypoint", label = "Waypoint 1"),
textInput(inputId = "waypoint2", label = "Waypoint 2"),
textInput(inputId = "destination", label = "Destination point"),
actionButton(inputId = "getRoute", label = "Get Route")
)
)
server <- function(input, output, session) {
map_key <- "MAP_KEY"
api_key <- "API_KEY"
output$mapWarsaw <- renderGoogle_map({
google_map(key = map_key,
search_box = TRUE,
scale_control = TRUE,
height = 1000) %>%
add_traffic()
})
observeEvent(input$getRoute,{
print("getting route")
o <- input$origin
w <- input$waypoint
q <- input$waypoint2
d <- input$destination
res <- google_directions(key = api_key,
origin = o,
waypoints = list(stop = w,
stop = q),
destination = d,
optimise_waypoints = TRUE,
mode = "driving")
df_route <- data.frame(route = res$routes$overview_polyline$points)
df_way <- cbind(
res$routes$legs[[1]]$end_location,
data.frame(address = res$routes$legs[[1]]$end_address)
)
df_way$order <- as.character(1:nrow(df_way))
google_map_update(map_id = "mapWarsaw") %>%
clear_traffic() %>%
clear_polylines() %>%
clear_markers() %>%
add_traffic() %>%
add_polylines(data = df_route,
polyline = "route",
stroke_colour = "#FF33D6",
stroke_weight = 7,
stroke_opacity = 0.7,
info_window = "New route",
load_interval = 100) %>%
add_markers(data = df_way,
info_window = "end_address",
label = "order")
})
}
shinyApp(ui, server)
library(shiny)
library(googleway)
ui <- navbarPage("APP NAME", position = c("static-top"),tabPanel("MAP",
google_mapOutput(outputId = "mapWarsaw"),
textInput(inputId = "origin", label = "Departure point"),
textInput(inputId = "waypoint", label = "Waypoint 1"),
textInput(inputId = "waypoint2", label = "Waypoint 2"),
textInput(inputId = "destination", label = "Destination point"),
actionButton(inputId = "getRoute", label = "Get Route")
)
)
server <- function(input, output, session) {
map_key <- "MAP_KEY"
api_key <- "API_KEY"
output$mapWarsaw <- renderGoogle_map({
google_map(key = map_key,
search_box = TRUE,
scale_control = TRUE,
height = 1000) %>%
add_traffic()
})
observeEvent(input$getRoute,{
print("getting route")
o <- input$origin
w <- input$waypoint
q <- input$waypoint2
d <- input$destination
res <- google_directions(key = api_key,
origin = o,
waypoints = list(stop = w,
stop = q),
destination = d,
optimise_waypoints = TRUE,
mode = "driving")
df_route <- data.frame(route = res$routes$overview_polyline$points)
df_way <- cbind(
res$routes$legs[[1]]$end_location,
data.frame(address = res$routes$legs[[1]]$end_address)
)
df_way$order <- as.character(1:nrow(df_way))
google_map_update(map_id = "mapWarsaw") %>%
clear_traffic() %>%
clear_polylines() %>%
clear_markers() %>%
add_traffic() %>%
add_polylines(data = df_route,
polyline = "route",
stroke_colour = "#FF33D6",
stroke_weight = 7,
stroke_opacity = 0.7,
info_window = "New route",
load_interval = 100) %>%
add_markers(data = df_way,
info_window = "end_address",
label = "order")
})
}
shinyApp(ui, server)
#Data
y <- c(199.0,205.0,196.0,200.0,218.0,220.0,215.0,223.0,237.0,234.0,235.0,230.0,250.0,248.0,253.0,246.0)
x <- c(rep(16,4),rep(24,4),rep(32,4),rep(40,4))
model <- lm(y~x)
summary(model)
model
y <- c(199.0,205.0,196.0,200.0,218.0,220.0,215.0,223.0,237.0,234.0,235.0,230.0,250.0,248.0,253.0,246.0)
x <- c(rep(16,4),rep(24,4),rep(32,4),rep(40,4))
model <- lm(y~x)
model
summary(model)
confint(model, 'x', level = 0.99)
#Data
y <- c(199.0,205.0,196.0,200.0,218.0,220.0,215.0,223.0,237.0,234.0,235.0,230.0,250.0,248.0,253.0,246.0)
x <- c(rep(16,4),rep(24,4),rep(32,4),rep(40,4))
model <- lm(y~x)
model
summary(model)
confint(model, 'x', level = 0.01)
#Data
y <- c(199.0,205.0,196.0,200.0,218.0,220.0,215.0,223.0,237.0,234.0,235.0,230.0,250.0,248.0,253.0,246.0)
x <- c(rep(16,4),rep(24,4),rep(32,4),rep(40,4))
model <- lm(y~x)
model
summary(model)
confint(model, 'x', level = 0.99)
#Data
y <- c(199.0,205.0,196.0,200.0,218.0,220.0,215.0,223.0,237.0,234.0,235.0,230.0,250.0,248.0,253.0,246.0)
x <- c(rep(16,4),rep(24,4),rep(32,4),rep(40,4))
model <- lm(y~x)
model
summary(model)
confint(model, 'x', level = 0.99)
aov(model)
fit  <- aov(y~x)
summary(fit)
#Data
y <- c(199.0,205.0,196.0,200.0,218.0,220.0,215.0,223.0,237.0,234.0,235.0,230.0,250.0,248.0,253.0,246.0)
x <- c(rep(16,4),rep(24,4),rep(32,4),rep(40,4))
model <- lm(y~x)
model
summary(model)
confint(model, 'x', level = 0.99)
fit  <- aov(model)
summary(fit)
var.test(x, y, alternative = "two.sided")
#Data
y <- c(199.0,205.0,196.0,200.0,218.0,220.0,215.0,223.0,237.0,234.0,235.0,230.0,250.0,248.0,253.0,246.0)
x <- c(rep(16,4),rep(24,4),rep(32,4),rep(40,4))
model <- lm(y~x)
model
summary(model)
confint(model, 'x', level = 0.99)
fit  <- aov(model)
summary(fit)
var.test(x, y, alternative = "two.sided")
t.test(y,x, var.equal = TRUE)
t.test(x,y, var.equal = TRUE)
summary(model)
model
confint(model, 'x', level = 0.99)
summary(model)
confint(model, 'x', level = 0.99)
install.packages("rMaps")
library(rMaps)
require(devtools)
install_github('ramnathv/rCharts@dev')
install_github('ramnathv/rMaps')
install.packages("rMaps", repos = "https://cloud.r-project.org/")
require('devtools')
:install_github("hadley/devtools")
install_github("hadley/devtools")
install.packages("devtools")
install_github('ramnathv/rCharts@dev')
install_github('ramnathv/rMaps')
library(rMaps)
install_github('ramnathv/rCharts@dev')
install_github('ramnathv/rCharts@dev')
require(devtools)
install_github('ramnathv/rCharts@dev')
install_github('ramnathv/rMaps')
library(rMaps)
map = Leaflet$new()
map$setView(c(40.73846, -73.99413), 16)
map$tileLayer(provider = 'Stamen.TonerLite')
mywaypoints = list(c(40.74119, -73.9925), c(40.73573, -73.99302))
map$addAssets(
css = "http://www.liedman.net/leaflet-routing-machine/dist/leaflet-routing-machine.css",
jshead = "http://www.liedman.net/leaflet-routing-machine/dist/leaflet-routing-machine.min.js"
)
routingTemplate = "
<script>
var mywaypoints = %s
L.Routing.control({
waypoints: [
L.latLng.apply(null, mywaypoints[0]),
L.latLng.apply(null, mywaypoints[1])
]
}).addTo(map);
</script>"
map$setTemplate(
afterScript = sprintf(routingTemplate, RJSONIO::toJSON(mywaypoints))
)
map$set(width = 1450, height = 800)
map
library(rMaps)
map = Leaflet$new()
map$setView(c(40.73846, -73.99413), 16)
map$tileLayer(provider = 'Stamen.TonerLite')
mywaypoints = list(c(40.74119, -73.9925), c(40.73573, -73.99302))
map$addAssets(
css = "http://www.liedman.net/leaflet-routing-machine/dist/leaflet-routing-machine.css",
jshead = "http://www.liedman.net/leaflet-routing-machine/dist/leaflet-routing-machine.min.js"
)
routingTemplate = "
<script>
var mywaypoints = %s
L.Routing.control({
waypoints: [
L.latLng.apply(null, mywaypoints[0]),
L.latLng.apply(null, mywaypoints[1])
]
}).addTo(map);
</script>"
map$setTemplate(
afterScript = sprintf(routingTemplate, RJSONIO::toJSON(mywaypoints))
)
map$set(width = 1450, height = 800)
map
library(rMaps)
map = Leaflet$new()
map$setView(c(40.73846, -73.99413), 16)
map$tileLayer(provider = 'Stamen.TonerLite')
mywaypoints = list(c(40.74119, -73.9925), c(40.73573, -73.99302))
map$addAssets(
css = "http://www.liedman.net/leaflet-routing-machine/dist/leaflet-routing-machine.css",
jshead = "http://www.liedman.net/leaflet-routing-machine/dist/leaflet-routing-machine.min.js"
)
routingTemplate = "
<script>
var mywaypoints = %s
L.Routing.control({
waypoints: [
L.latLng.apply(null, mywaypoints[0]),
L.latLng.apply(null, mywaypoints[1])
]
}).addTo(map);
</script>"
map$setTemplate(
afterScript = sprintf(routingTemplate, RJSONIO::toJSON(mywaypoints))
)
map$set(width = 1450, height = 800)
map
mywaypoints = list(c(40.74119, -73.9925), c(40.73573, -73.99302))
library(rMaps)
map = Leaflet$new()
map$setView(c(40.73846, -73.99413), 16)
map$tileLayer(provider = 'Stamen.TonerLite')
display_chart = function(viz){
y = paste(capture.output(viz$show('iframesrc', cdn = TRUE)), collapse = "\n")
IRdisplay::display_html(y)
}
display_chart(map)
library(rMaps)
map = Leaflet$new()
map$setView(c(40.73846, -73.99413), 16)
map$tileLayer(provider = 'Stamen.TonerLite')
display_chart = function(viz){
y = paste(capture.output(viz$show('iframesrc', cdn = TRUE)), collapse = "\n")
IRdisplay::display_html(y)
}
mywaypoints = list(c(40.74119, -73.9925), c(40.73573, -73.99302))
map$addAssets(
css = "http://www.liedman.net/leaflet-routing-machine/dist/leaflet-routing-machine.css",
jshead = "http://www.liedman.net/leaflet-routing-machine/dist/leaflet-routing-machine.min.js"
)
routingTemplate = "
<script>
var mywaypoints = %s
L.Routing.control({
waypoints: [
L.latLng.apply(null, mywaypoints[0]),
L.latLng.apply(null, mywaypoints[1])
]
}).addTo(map);
</script>"
map$setTemplate(
afterScript = sprintf(routingTemplate, RJSONIO::toJSON(mywaypoints))
)
map$set(width = 1450, height = 800)
map
shiny::runApp('Documents/GitHub/Fall2018-Project2-sec1_proj2_grp1/doc')
runApp('Documents/GitHub/Fall2018-Project2-sec1_proj2_grp1/doc')
runApp('Documents/GitHub/Fall2018-Project2-sec1_proj2_grp1/doc')
interaction.plot("here")
install.packages("here")
runApp('Documents/GitHub/Fall2018-Project2-sec1_proj2_grp1/doc')
install.packages("rgdal")
runApp('Documents/GitHub/Fall2018-Project2-sec1_proj2_grp1/doc')
runApp('Documents/GitHub/Fall2018-Project2-sec1_proj2_grp1/doc')
shiny::runApp('Documents/GitHub/Fall2018-Project2-sec1_proj2_grp1/doc')
runApp('Documents/GitHub/Fall2018-Project2-sec1_proj2_grp1/doc')
runApp('Documents/GitHub/Fall2018-Project2-sec1_proj2_grp1/doc')
runApp('Documents/GitHub/Fall2018-Project2-sec1_proj2_grp1/doc')
runApp('Documents/GitHub/Fall2018-Project2-sec1_proj2_grp1/doc')
runApp('Documents/GitHub/Fall2018-Project2-sec1_proj2_grp1/doc')
runApp('Documents/GitHub/Fall2018-Project2-sec1_proj2_grp1/doc')
runApp('Documents/GitHub/Fall2018-Project2-sec1_proj2_grp1/doc')
runApp('Documents/GitHub/Fall2018-Project2-sec1_proj2_grp1/doc')
runApp('Documents/GitHub/Fall2018-Project2-sec1_proj2_grp1/doc')
runApp('Documents/GitHub/Fall2018-Project2-sec1_proj2_grp1/doc')
library(shiny)
library(shinydashboard)
library(data.table)
library(ggmap)
library(leaflet)
library(plotly)
library(RJSONIO)
library(geosphere)
library(purrr)
runApp('Documents/GitHub/Fall2018-Project2-sec1_proj2_grp1/doc')
runApp('Documents/GitHub/Fall2018-Project2-sec1_proj2_grp1/doc')
