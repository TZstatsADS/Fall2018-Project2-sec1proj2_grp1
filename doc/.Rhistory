search_box = TRUE,
scale_control = TRUE,
height = 1000) %>%
add_traffic()
})
observeEvent(input$getRoute,{
print("getting route")
o <- input$origin
w <- input$waypoint
q <- input$waypoint2
d <- input$destination
res <- google_directions(key = api_key,
origin = o,
waypoints = list(stop = w,
stop = q),
destination = d,
optimise_waypoints = TRUE,
mode = "driving")
df_route <- data.frame(route = res$routes$overview_polyline$points)
df_way <- cbind(
res$routes$legs[[1]]$end_location,
data.frame(address = res$routes$legs[[1]]$end_address)
)
df_way$order <- as.character(1:nrow(df_way))
google_map_update(map_id = "mapWarsaw") %>%
clear_traffic() %>%
clear_polylines() %>%
clear_markers() %>%
add_traffic() %>%
add_polylines(data = df_route,
polyline = "route",
stroke_colour = "#FF33D6",
stroke_weight = 7,
stroke_opacity = 0.7,
info_window = "New route",
load_interval = 100) %>%
add_markers(data = df_way,
info_window = "end_address",
label = "order")
})
}
shinyApp(ui, server)
library(shiny)
library(googleway)
ui <- navbarPage("APP NAME", position = c("static-top"),tabPanel("MAP",
google_mapOutput(outputId = "mapWarsaw"),
textInput(inputId = "origin", label = "Departure point"),
textInput(inputId = "waypoint", label = "Waypoint 1"),
textInput(inputId = "waypoint2", label = "Waypoint 2"),
textInput(inputId = "destination", label = "Destination point"),
actionButton(inputId = "getRoute", label = "Get Route")
)
)
server <- function(input, output, session) {
map_key <- "MAP_KEY"
api_key <- "API_KEY"
output$mapWarsaw <- renderGoogle_map({
google_map(key = map_key,
search_box = TRUE,
scale_control = TRUE,
height = 1000) %>%
add_traffic()
})
observeEvent(input$getRoute,{
print("getting route")
o <- input$origin
w <- input$waypoint
q <- input$waypoint2
d <- input$destination
res <- google_directions(key = api_key,
origin = o,
waypoints = list(stop = w,
stop = q),
destination = d,
optimise_waypoints = TRUE,
mode = "driving")
df_route <- data.frame(route = res$routes$overview_polyline$points)
df_way <- cbind(
res$routes$legs[[1]]$end_location,
data.frame(address = res$routes$legs[[1]]$end_address)
)
df_way$order <- as.character(1:nrow(df_way))
google_map_update(map_id = "mapWarsaw") %>%
clear_traffic() %>%
clear_polylines() %>%
clear_markers() %>%
add_traffic() %>%
add_polylines(data = df_route,
polyline = "route",
stroke_colour = "#FF33D6",
stroke_weight = 7,
stroke_opacity = 0.7,
info_window = "New route",
load_interval = 100) %>%
add_markers(data = df_way,
info_window = "end_address",
label = "order")
})
}
shinyApp(ui, server)
#Data
y <- c(199.0,205.0,196.0,200.0,218.0,220.0,215.0,223.0,237.0,234.0,235.0,230.0,250.0,248.0,253.0,246.0)
x <- c(rep(16,4),rep(24,4),rep(32,4),rep(40,4))
model <- lm(y~x)
summary(model)
model
y <- c(199.0,205.0,196.0,200.0,218.0,220.0,215.0,223.0,237.0,234.0,235.0,230.0,250.0,248.0,253.0,246.0)
x <- c(rep(16,4),rep(24,4),rep(32,4),rep(40,4))
model <- lm(y~x)
model
summary(model)
confint(model, 'x', level = 0.99)
#Data
y <- c(199.0,205.0,196.0,200.0,218.0,220.0,215.0,223.0,237.0,234.0,235.0,230.0,250.0,248.0,253.0,246.0)
x <- c(rep(16,4),rep(24,4),rep(32,4),rep(40,4))
model <- lm(y~x)
model
summary(model)
confint(model, 'x', level = 0.01)
#Data
y <- c(199.0,205.0,196.0,200.0,218.0,220.0,215.0,223.0,237.0,234.0,235.0,230.0,250.0,248.0,253.0,246.0)
x <- c(rep(16,4),rep(24,4),rep(32,4),rep(40,4))
model <- lm(y~x)
model
summary(model)
confint(model, 'x', level = 0.99)
#Data
y <- c(199.0,205.0,196.0,200.0,218.0,220.0,215.0,223.0,237.0,234.0,235.0,230.0,250.0,248.0,253.0,246.0)
x <- c(rep(16,4),rep(24,4),rep(32,4),rep(40,4))
model <- lm(y~x)
model
summary(model)
confint(model, 'x', level = 0.99)
aov(model)
fit  <- aov(y~x)
summary(fit)
#Data
y <- c(199.0,205.0,196.0,200.0,218.0,220.0,215.0,223.0,237.0,234.0,235.0,230.0,250.0,248.0,253.0,246.0)
x <- c(rep(16,4),rep(24,4),rep(32,4),rep(40,4))
model <- lm(y~x)
model
summary(model)
confint(model, 'x', level = 0.99)
fit  <- aov(model)
summary(fit)
var.test(x, y, alternative = "two.sided")
#Data
y <- c(199.0,205.0,196.0,200.0,218.0,220.0,215.0,223.0,237.0,234.0,235.0,230.0,250.0,248.0,253.0,246.0)
x <- c(rep(16,4),rep(24,4),rep(32,4),rep(40,4))
model <- lm(y~x)
model
summary(model)
confint(model, 'x', level = 0.99)
fit  <- aov(model)
summary(fit)
var.test(x, y, alternative = "two.sided")
t.test(y,x, var.equal = TRUE)
t.test(x,y, var.equal = TRUE)
summary(model)
model
confint(model, 'x', level = 0.99)
summary(model)
confint(model, 'x', level = 0.99)
install.packages("rMaps")
library(rMaps)
require(devtools)
install_github('ramnathv/rCharts@dev')
install_github('ramnathv/rMaps')
install.packages("rMaps", repos = "https://cloud.r-project.org/")
require('devtools')
:install_github("hadley/devtools")
install_github("hadley/devtools")
install.packages("devtools")
install_github('ramnathv/rCharts@dev')
install_github('ramnathv/rMaps')
library(rMaps)
install_github('ramnathv/rCharts@dev')
install_github('ramnathv/rCharts@dev')
require(devtools)
install_github('ramnathv/rCharts@dev')
install_github('ramnathv/rMaps')
library(rMaps)
map = Leaflet$new()
map$setView(c(40.73846, -73.99413), 16)
map$tileLayer(provider = 'Stamen.TonerLite')
mywaypoints = list(c(40.74119, -73.9925), c(40.73573, -73.99302))
map$addAssets(
css = "http://www.liedman.net/leaflet-routing-machine/dist/leaflet-routing-machine.css",
jshead = "http://www.liedman.net/leaflet-routing-machine/dist/leaflet-routing-machine.min.js"
)
routingTemplate = "
<script>
var mywaypoints = %s
L.Routing.control({
waypoints: [
L.latLng.apply(null, mywaypoints[0]),
L.latLng.apply(null, mywaypoints[1])
]
}).addTo(map);
</script>"
map$setTemplate(
afterScript = sprintf(routingTemplate, RJSONIO::toJSON(mywaypoints))
)
map$set(width = 1450, height = 800)
map
library(rMaps)
map = Leaflet$new()
map$setView(c(40.73846, -73.99413), 16)
map$tileLayer(provider = 'Stamen.TonerLite')
mywaypoints = list(c(40.74119, -73.9925), c(40.73573, -73.99302))
map$addAssets(
css = "http://www.liedman.net/leaflet-routing-machine/dist/leaflet-routing-machine.css",
jshead = "http://www.liedman.net/leaflet-routing-machine/dist/leaflet-routing-machine.min.js"
)
routingTemplate = "
<script>
var mywaypoints = %s
L.Routing.control({
waypoints: [
L.latLng.apply(null, mywaypoints[0]),
L.latLng.apply(null, mywaypoints[1])
]
}).addTo(map);
</script>"
map$setTemplate(
afterScript = sprintf(routingTemplate, RJSONIO::toJSON(mywaypoints))
)
map$set(width = 1450, height = 800)
map
library(rMaps)
map = Leaflet$new()
map$setView(c(40.73846, -73.99413), 16)
map$tileLayer(provider = 'Stamen.TonerLite')
mywaypoints = list(c(40.74119, -73.9925), c(40.73573, -73.99302))
map$addAssets(
css = "http://www.liedman.net/leaflet-routing-machine/dist/leaflet-routing-machine.css",
jshead = "http://www.liedman.net/leaflet-routing-machine/dist/leaflet-routing-machine.min.js"
)
routingTemplate = "
<script>
var mywaypoints = %s
L.Routing.control({
waypoints: [
L.latLng.apply(null, mywaypoints[0]),
L.latLng.apply(null, mywaypoints[1])
]
}).addTo(map);
</script>"
map$setTemplate(
afterScript = sprintf(routingTemplate, RJSONIO::toJSON(mywaypoints))
)
map$set(width = 1450, height = 800)
map
mywaypoints = list(c(40.74119, -73.9925), c(40.73573, -73.99302))
library(rMaps)
map = Leaflet$new()
map$setView(c(40.73846, -73.99413), 16)
map$tileLayer(provider = 'Stamen.TonerLite')
display_chart = function(viz){
y = paste(capture.output(viz$show('iframesrc', cdn = TRUE)), collapse = "\n")
IRdisplay::display_html(y)
}
display_chart(map)
library(rMaps)
map = Leaflet$new()
map$setView(c(40.73846, -73.99413), 16)
map$tileLayer(provider = 'Stamen.TonerLite')
display_chart = function(viz){
y = paste(capture.output(viz$show('iframesrc', cdn = TRUE)), collapse = "\n")
IRdisplay::display_html(y)
}
mywaypoints = list(c(40.74119, -73.9925), c(40.73573, -73.99302))
map$addAssets(
css = "http://www.liedman.net/leaflet-routing-machine/dist/leaflet-routing-machine.css",
jshead = "http://www.liedman.net/leaflet-routing-machine/dist/leaflet-routing-machine.min.js"
)
routingTemplate = "
<script>
var mywaypoints = %s
L.Routing.control({
waypoints: [
L.latLng.apply(null, mywaypoints[0]),
L.latLng.apply(null, mywaypoints[1])
]
}).addTo(map);
</script>"
map$setTemplate(
afterScript = sprintf(routingTemplate, RJSONIO::toJSON(mywaypoints))
)
map$set(width = 1450, height = 800)
map
shiny::runApp('Documents/GitHub/Fall2018-Project2-sec1_proj2_grp1/doc')
runApp('Documents/GitHub/Fall2018-Project2-sec1_proj2_grp1/doc')
runApp('Documents/GitHub/Fall2018-Project2-sec1_proj2_grp1/doc')
interaction.plot("here")
install.packages("here")
runApp('Documents/GitHub/Fall2018-Project2-sec1_proj2_grp1/doc')
install.packages("rgdal")
runApp('Documents/GitHub/Fall2018-Project2-sec1_proj2_grp1/doc')
runApp('Documents/GitHub/Fall2018-Project2-sec1_proj2_grp1/doc')
shiny::runApp('Documents/GitHub/Fall2018-Project2-sec1_proj2_grp1/doc')
runApp('Documents/GitHub/Fall2018-Project2-sec1_proj2_grp1/doc')
runApp('Documents/GitHub/Fall2018-Project2-sec1_proj2_grp1/doc')
runApp('Documents/GitHub/Fall2018-Project2-sec1_proj2_grp1/doc')
runApp('Documents/GitHub/Fall2018-Project2-sec1_proj2_grp1/doc')
runApp('Documents/GitHub/Fall2018-Project2-sec1_proj2_grp1/doc')
runApp('Documents/GitHub/Fall2018-Project2-sec1_proj2_grp1/doc')
runApp('Documents/GitHub/Fall2018-Project2-sec1_proj2_grp1/doc')
runApp('Documents/GitHub/Fall2018-Project2-sec1_proj2_grp1/doc')
runApp('Documents/GitHub/Fall2018-Project2-sec1_proj2_grp1/doc')
runApp('Documents/GitHub/Fall2018-Project2-sec1_proj2_grp1/doc')
runApp('Documents/GitHub/Fall2018-Project2-sec1_proj2_grp1/doc')
runApp('Documents/GitHub/Fall2018-Project2-sec1_proj2_grp1/doc')
library(shiny)
if (interactive()) {
ui <- fluidPage(
checkboxGroupInput("variable", "Variables to show:",
c("Cylinders" = "cyl",
"Transmission" = "am",
"Gears" = "gear")),
tableOutput("data")
)
server <- function(input, output) {
output$data <- renderTable({
mtcars[, c("mpg", input$variable), drop = FALSE]
}, rownames = TRUE)
}
shinyApp(ui, server)
}
shiny::runApp('Documents/GitHub/Fall2018-Project2-sec1_proj2_grp1/doc')
install.packages("leaflet.extras")
runApp('Documents/GitHub/Fall2018-Project2-sec1_proj2_grp1/doc')
runApp('Documents/GitHub/Fall2018-Project2-sec1_proj2_grp1/doc')
runApp('Documents/GitHub/Fall2018-Project2-sec1_proj2_grp1/doc')
runApp('Documents/GitHub/Fall2018-Project2-sec1_proj2_grp1/doc')
runApp('Documents/GitHub/Fall2018-Project2-sec1_proj2_grp1/doc')
setwd("~/Documents/GitHub/Fall2018-Project2-sec1_proj2_grp1/doc")
runApp()
install.packages("chron")
install.packages("chron")
install.packages("rgdal")
install.packages("rgdal")
runApp()
runApp()
runApp()
runApp()
setwd("~/Documents/GitHub/Fall2018-Project2-sec1_proj2_grp1/doc")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("profvis")
library(profvis)
profvis(runApp())
library(profvis)
profvis(runApp())
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
dashboardBody(
tabItems(
# First tab content
tabItem(tabName = "dashboard",
fluidRow(
box(plotOutput("plot1", height = 250)),
box(
title = "Controls",
sliderInput("slider", "Number of observations:", 1, 100, 50)
)
)
),
# Second tab content
tabItem(tabName = "widgets",
h2("Widgets tab content")
)
)
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
output$tableLive <- renderDataTable(live)
output$tableStations <- renderDataTable(stations)
output$tablecrime <- renderDataTable(crime)
runApp()
runApp()
output$tableLive <- renderDataTable(live)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
live <- fromJSON(file = "https://gbfs.citibikenyc.com/gbfs/en/station_status.json")
stations <- fromJSON(file = "https://gbfs.citibikenyc.com/gbfs/en/station_information.json")
load("../output/bikeRoutes.RData")
crime <- read.csv("../data/NYPD.csv")
pics <- list.files(path="../figs/numbers/mapiconscollection",pattern="*.png", full.names=T, recursive=FALSE)
begin <- as.numeric(as.matrix(gregexpr("_", pics)))
endd <- as.numeric(as.matrix(gregexpr("\\.[^\\.]*$", pics)))
picsNumber <- as.numeric(substring(pics, begin + 1, endd - 1))
pics <- pics[order(picsNumber)]
markers <- lapply(pics,  function(x) makeIcon(x, iconHeight = 3))
class(markers) <- "leaflet_icon_set"
l <- length(stations$data$stations)
s <- data.frame(lat = rep(NA, l), lng <- rep(NA, l))
for(i in 1:l){
s$lat[i] <- stations$data$stations[i][[1]]$lat
s$lng[i] <- stations$data$stations[i][[1]]$lon
s$available[i] <- live$data$stations[i][[1]]$num_bikes_available
}
crime.m <- subset(crime, crime$BORO_NM=="MANHATTAN")
crime.m <- subset(crime, crime$BORO_NM=="MANHATTAN")
crime.m.f <- subset(crime.m, crime.m$LAW_CAT_CD=="FELONY")
crime.m.f$date <- as.Date(crime.m.f$CMPLNT_FR_DT, format = "%m/%d/%Y")
c.street <- subset(crime.m.f, crime.m.f$PREM_TYP_DESC=="STREET")
crime.m.f$date <- as.Date(crime.m.f$CMPLNT_FR_DT, format = "%m/%d/%Y")
c.street$time <- as.POSIXct(as.character(c.street$CMPLNT_FR_TM), format = "%H:%M")
c.street$time <- chron(times. = as.character(c.street$CMPLNT_FR_TM))
c.street$t <- c.street$time
c.street$t <- as.character(c.street$t)
c.street$t[c.street$time > "6:00:00" & c.street$time <"12:00:00"] <- "morning"
c.street$t[c.street$time >= "12:00:00" & c.street$time <"18:00:00"] <- "afternoon"
c.street$t[c.street$time >= "18:00:00" & c.street$time <"23:59:59"] <- "evening"
c.street$t[c.street$time >= "0:00:00" & c.street$time <="6:00:00"] <- "night"
c1 <- subset(c.street, c.street$t=="morning")
c2 <- subset(c.street, c.street$t=="afternoon")
c3 <- subset(c.street, c.street$t=="evening")
c4 <- subset(c.street, c.street$t=="night")
s %>%
leaflet() %>%
addProviderTiles(providers$Stamen.Toner) %>%
addMarkers(icon=~markers[s$available + 1]
, clusterOptions = markerClusterOptions()
) %>%
addPolygons(data=routes,weight=3,col = 'green') %>%
addWMSTiles(
"http://mesonet.agron.iastate.edu/cgi-bin/wms/nexrad/n0r.cgi",
layers = "nexrad-n0r-900913",
options = WMSTileOptions(format = "image/png", transparent = TRUE),
attribution = "Weather data ?? 2012 IEM Nexrad"
# make it transparanet
)%>%
addTiles() %>%
addLayersControl(overlayGroups = c("morning", "afternoon","evening",'night' ))%>%
addWebGLHeatmap(data = c1, lng = ~Longitude, lat = ~Latitude,
size = 500, opacity = 0.6, group = "morning")%>%
addWebGLHeatmap(data = c2, lng = ~Longitude, lat = ~Latitude,
size = 500, opacity = 0.6, group = "afternoon")%>%
addWebGLHeatmap(data = c3, lng = ~Longitude, lat = ~Latitude,
size = 500, opacity = 0.6, group = "evening")%>%
addWebGLHeatmap(data = c4, lng = ~Longitude, lat = ~Latitude,
size = 500, opacity = 0.6, group = "night")
runApp()
shiny::runApp()
