legend.text.size = 9,
axis.label.size = 4)
# Step 0 - Load all the required libraries
library(tidyverse)
library(tidytext)
library(DT)
library(ngram)
library(wordcloud2)
library(knitr)
library(kableExtra)
library(scales)
library(gridExtra)
library(shiny)
knitr::opts_chunk$set(echo = F)
# Step 1 - Load the processed text data along with demographic information on contributors
# We use the processed data for our analysis and combine it with the demographic information available.
hm_data <- read_csv("../output/processed_moments.csv")
urlfile<-'https://raw.githubusercontent.com/rit-public/HappyDB/master/happydb/data/demographic.csv'
demo_data <- read_csv(urlfile)
# Combine both the data sets and keep the required columns for analysis
# We select a subset of the data that satisfies specific row conditions.
hm_data <- hm_data %>%
inner_join(demo_data, by = "wid") %>%
select(wid,
original_hm,
gender,
marital,
parenthood,
reflection_period,
age,
country,
ground_truth_category,
text,
others) %>%
mutate(count = sapply(hm_data$text, wordcount)) %>%
filter(gender %in% c("m", "f")) %>%
filter(marital %in% c("single", "married")) %>%
filter(parenthood %in% c("n", "y")) %>%
filter(reflection_period %in% c("24h", "3m")) %>%
mutate(reflection_period = fct_recode(reflection_period,
months_3 = "3m", hours_24 = "24h"))
countries <- as.data.frame(table(demo_data$country))
names(countries) <- c("country", "freq")
countries <- countries[order(countries$freq, decreasing = T),]
countries$d <- rep(1:10, each = 10)
countriesby10 <- split(countries, countries$d)
countriesby10 <- lapply(countriesby10, function(x) x[,1:2])
kable(countriesby10, "html", col.names = NULL, row.names = F)
#hm_data$others <- hm_data$others > 0
par(mfrow = c(2,2))
boxplot(others/count ~ gender, hm_data)
boxplot(others/count ~ marital, hm_data)
boxplot(others/count ~ parenthood, hm_data)
boxplot(others/count ~ country, hm_data, subset = country %in% c("USA", "IND"))
par(mfrow = c(1,1))
hm_data$age <- as.double(hm_data$age)
# l <- loess(others/count ~ age, hm_data)
#
# plot(others/count ~ age, hm_data, subset = age < 150)
# lines(with(hm_data, others/count), l$fitted, col = "red", lwd = 3)
#
# ggplot(hm_data, aes(others/count ~ age)) + geom_point()
#
boxplot(others/count ~ age, hm_data, subset = age < 150)
hm_data_alone <- hm_data[hm_data$others == 0,]
hm_data_others <- hm_data[hm_data$others > 0,]
word_count_alone <- hm_data_alone %>%
unnest_tokens(word, text) %>%
count(word, sort = TRUE)
word_count_others <- hm_data_others %>%
unnest_tokens(word, text) %>%
count(word, sort = TRUE)
source("wordlists.R")
word_count_others <- word_count_others[! word_count_others$word %in% others,]
wordcloud2(word_count_alone[1:20,], size = 0.6,
rotateRatio = 0)
wordcloud2(word_count_others[1:20,], size = 0.6,
rotateRatio = 0)
hm_bigrams <- hm_data %>%
filter(count != 1) %>%
unnest_tokens(bigram, text, token = "ngrams", n = 2)
bigram_counts <- hm_bigrams %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
count(word1, word2, sort = TRUE)
# bigram
library(tidytext)
sentScore <- get_sentiments("afinn")
aloneScore <- hm_data %>%
filter(others == 0) %>%
unnest_tokens(word, text) %>%
inner_join(sentScore) %>%
group_by(wid) %>%
dplyr::summarize(mean(score))
othersScore <- hm_data %>%
filter(others > 0) %>%
unnest_tokens(word, text) %>%
inner_join(sentScore) %>%
group_by(wid) %>%
dplyr::summarize(mean(score))
boxplot(aloneScore$`mean(score)`, othersScore$`mean(score)`)
countries <- as.data.frame(table(demo_data$country))
countries <- countries[order(countries$freq, decreasing = T),]
countries <- as.data.frame(table(demo_data$country))
names(countries) <- c("country", "freq")
countries <- countries[order(countries$freq, decreasing = T),]
countries
wordcloud2(countries, size = 0.6,
rotateRatio = 0)
wordcloud2(countries, size = 0.6,
rotateRatio = 2)
wordcloud2(countries, size = 0.6,
rotateRatio = 6)
wordcloud2(countries, size = 0.6,
rotateRatio = 0)
wordcloud2(countries, size = 2,
rotateRatio = 0)
wordcloud2(countries, size = 1.2,
rotateRatio = 0)
countries$freq %>% log()
countries$freq + 1 %>% log()
(countries$freq + 1) %>% log()
countries$freq <- (countries$freq + 1) %>% log()
wordcloud2(countries, size = 1.2,
rotateRatio = 0)
wordcloud2(countries, size = 1,
rotateRatio = 0)
hist(countries[1:20])
hist(countries[1:20,])
countries[1:20,]
barchart(countries[1:20,])
barplot(countries[1:20,])
barplot(countries[1:20,]$freq)
barplot(countries[1:20,]$freq, horiz = T,
names.arg = countries[1:20,]$country)
par(las=2) # make label text perpendicular to axis
barplot(countries[1:20,]$freq, horiz = T,
names.arg = countries[1:20,]$country, )
par(las=2) # make label text perpendicular to axis
barplot(countries[1:20,]$freq, horiz = T,
names.arg = countries[1:20,]$country)
ggplot(countries) + geom_bar()
ggplot(countries, aes(country, freq)) + geom_bar()
ggplot(countries, aes(country, freq))
ggplot(countries, aes(country, freq)) + geom_bar(stat = "identity")
ggplot(countries[1:20], aes(country, freq))
+ coord_flip()
ggplot(countries[1:20], aes(country, freq)) +
geom_bar(stat = "identity") +
coord_flip()
ggplot(countries[1:20,], aes(country, freq)) +
geom_bar(stat = "identity") +
coord_flip()
ggplot(countries[1:20,], aes(country, freq)) +
geom_bar(stat = "identity") +
coord_flip() + theme_classic()
countries <- as.data.frame(table(demo_data$country))
names(countries) <- c("country", "freq")
countries <- countries[order(countries$freq, decreasing = T),]
ggplot(countries[1:20,], aes(country, freq)) +
geom_bar(stat = "identity") +
coord_flip() + theme_classic()
countries$country <- factor(countries$country, levels = countries$country[order(countries$freq)])
ggplot(countries[1:20,], aes(country, freq)) +
geom_bar(stat = "identity") +
coord_flip() + theme_classic()
getwd()
hist(cars)
pdf(hist(rnorm(100), "hist.pdf")
ggplot(countries[1:20,], aes(country, freq)) +
pdf(hist(rnorm(100), "hist.pdf"))
pdf("path/to/folder/hist.pdf")
pdf("./hist.pdf")
hist(rnorm(100))
dev.off()
pdf("./hist.pdf")
hist(rnorm(100))
dev.off()
plot(rnorm(100))
dev.off()
plot(rnorm(100))
dev.print(pdf, 'filename.pdf')
ggplot(countries[1:20,], aes(country, freq)) +
geom_bar(stat = "identity") +
coord_flip() + theme_classic()
ggsave("out.pdf")
remove.packages("wordcloud2")
install.packages("wordcloud2")
install.packages("wordcloud2")
knitr::opts_chunk$set(echo = F)
# Step 0 - Load all the required libraries
library(tidyverse)
library(tidytext)
library(DT)
library(ngram)
library(wordcloud2)
library(knitr)
library(kableExtra)
library(scales)
library(gridExtra)
library(shiny)
# Step 1 - Load the processed text data along with demographic information on contributors
# We use the processed data for our analysis and combine it with the demographic information available.
hm_data <- read_csv("../output/processed_moments.csv")
urlfile<-'https://raw.githubusercontent.com/rit-public/HappyDB/master/happydb/data/demographic.csv'
demo_data <- read_csv(urlfile)
# Combine both the data sets and keep the required columns for analysis
# We select a subset of the data that satisfies specific row conditions.
hm_data <- hm_data %>%
inner_join(demo_data, by = "wid") %>%
select(wid,
original_hm,
gender,
marital,
parenthood,
reflection_period,
age,
country,
ground_truth_category,
text,
others) %>%
mutate(count = sapply(hm_data$text, wordcount)) %>%
filter(gender %in% c("m", "f")) %>%
filter(marital %in% c("single", "married")) %>%
filter(parenthood %in% c("n", "y")) %>%
filter(reflection_period %in% c("24h", "3m")) %>%
mutate(reflection_period = fct_recode(reflection_period,
months_3 = "3m", hours_24 = "24h"))
countries <- as.data.frame(table(demo_data$country))
countries <- countries[order(countries$freq, decreasing = T),]
countries <- as.data.frame(table(demo_data$country))
names(countries) <- c("country", "freq")
countries <- countries[order(countries$freq, decreasing = T),]
wordcloud2(countries, size = 1,
rotateRatio = 0)
scatter.smooth(others/count ~ age, hm_data, subset = age < 150)
scatter.smooth(others/count, age, hm_data, subset = age < 150)
scatter.smooth(hm_data$others/hm_data$count, hm_data$age, subset = age < 150)
scatter.smooth(hm_data$others/hm_data$count, hm_data$age, subset = hm_data$ < 150)
scatter.smooth(hm_data$others/hm_data$count, hm_data$age, subset = hm_data$age < 150)
scatter.smooth(hm_data$others/hm_data$count, hm_data$age)
loess.smooth(hm_data$others/hm_data$count, hm_data$age)
scatter.smooth(hm_data$others/hm_data$count, hm_data$age, degree = 3)
scatter.smooth(hm_data$others/hm_data$count, hm_data$age, span = 1/3, degree = 3)
ggplot(hm_data, aes(others/count ~ age))
ggplot(hm_data, aes(others ~ age))
ggplot(hm_data, aes(others/count, age))
ggplot(hm_data, aes(others/count, age)) + geom_point()
ggplot(hm_data, aes(age, others/count)) + geom_point()
ggplot(hm_data, aes(age, others/count)) +
geom_point() + geom_smooth()
ggplot(hm_data, aes(age, others/count)) +
geom_point() + geom_smooth(span = 0.3)
ggplot(hm_data, aes(age, others/count)) +
geom_point() + geom_smooth(aes(age, others/count), span = 0.3)
ggplot(hm_data, aes(age, others)) +
geom_point() + geom_smooth( span = 0.3)
ggplot(subset(hm_data, !is.na(age)), aes(age, others/count)) +
geom_point() + geom_smooth(span = 0.3)
str(hm_data)
hm_data$age <- as.double(hm_data$age)
str(hm_data)
ggplot(subset(hm_data, !is.na(age)), aes(age, others/count)) +
geom_point() + geom_smooth(span = 0.3)
scatter.smooth(hm_data$others/hm_data$count, hm_data$age, span = 1/3, degree = 3), subset = hm_data$age < 150)
ggplot(subset(hm_data, age < 150), aes(age, others/count)) +
geom_point() + geom_smooth(span = 0.3)
ggplot(subset(hm_data, age < 150), aes(age, others/count)) +
geom_point() + geom_smooth(span = 0.3) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = 'black', size = .2),
axis.ticks = element_line(colour = "black", size = .2),
panel.background = element_rect(fill = "grey"))
ggplot(subset(hm_data, age < 150), aes(age, others/count)) +
geom_point() + geom_smooth(span = 0.3) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = 'black', size = .2),
axis.ticks = element_line(colour = "black", size = .2))
ggplot(subset(hm_data, age < 150), aes(age, others/count)) +
geom_point() + geom_smooth(span = 0.3) +
theme_classic() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = 'black', size = .2),
axis.ticks = element_line(colour = "black", size = .2))
ggplot(subset(hm_data, age < 150), aes(age, others/count)) +
geom_point(size = 0.5) + geom_smooth(span = 0.3) +
theme_classic() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = 'black', size = .2),
axis.ticks = element_line(colour = "black", size = .2))
ggplot(subset(hm_data, age < 150), aes(age, others/count)) +
geom_point(size = 0.5) + geom_smooth(span = 0.3, width = 0.5) +
theme_classic() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = 'black', size = .2),
axis.ticks = element_line(colour = "black", size = .2))
ggplot(subset(hm_data, age < 150), aes(age, others/count)) +
geom_point(size = 0.5) + geom_smooth(span = 0.3, width = 0.2) +
theme_classic() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = 'black', size = .2),
axis.ticks = element_line(colour = "black", size = .2))
ggplot(subset(hm_data, age < 150), aes(age, others/count)) +
geom_point(size = 0.5) + geom_smooth(span = 0.3, size = 0.2) +
theme_classic() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = 'black', size = .2),
axis.ticks = element_line(colour = "black", size = .2))
ggplot(subset(hm_data, age < 150), aes(age, others/count)) +
geom_point(size = 0.5) + geom_smooth(span = 0.3, size = 0.4) +
theme_classic() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = 'black', size = .2),
axis.ticks = element_line(colour = "black", size = .2))
ggplot(subset(hm_data, age < 150), aes(age, others/count)) +
geom_point(size = 0.5) + geom_smooth(span = 0.3, size = 0.4) +
theme_classic() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = 'black', size = .2),
axis.ticks = element_line(colour = "black", size = .2)) +
labs(y = "number of mentions of others per statement")
library(wordcloud)
install.packages("wordcloud")
library(wordcloud)
wordcloud(word_count_alone[1:20,], size = 0.6,
rotateRatio = 0)
wordcloud(word_count_alone[1:20,])
str(word_count_alone)
wordcloud(as.data.frame(word_count_alone[1:20,]))
wordcloud(as.matrix(word_count_alone[1:20,]))
wordcloud(word_count_alone[1:20,]$word, word_count_alone[1:20,]$n)
wordcloud(word_count_alone[1:20,]$word, word_count_alone[1:20,]$n, ordered.colors = T)
wordcloud(word_count_alone[1:20,]$word, word_count_alone[1:20,]$n, ordered.colors = T)
wordcloud(word_count_alone[1:20,]$word, word_count_alone[1:20,]$n,
scale = c(4, .5))
wordcloud(word_count_alone[1:20,]$word, word_count_alone[1:20,]$n,
scale = c(3, .5))
wordcloud(word_count_alone[1:20,]$word, word_count_alone[1:20,]$n,
colours = "blue",scale = c(3, .5))
wordcloud(word_count_alone[1:20,]$word, word_count_alone[1:20,]$n,
colors = "blue",scale = c(3, .5))
wordcloud(word_count_alone[1:20,]$word, word_count_alone[1:20,]$n,
colors = "red",scale = c(3, .5))
wordcloud(word_count_alone[1:20,]$word, word_count_alone[1:20,]$n,
colors = "red",scale = c(3, .2))
library(wordcloud)
par(mfrow = c(1,2))
wordcloud(word_count_alone[1:20,]$word, word_count_alone[1:20,]$n,
colors = "red",scale = c(3, .2))
wordcloud(word_count_others[1:20,]$word, word_count_others[1:20,]$n,
colors = "red",scale = c(3, .2))
par(mfrow = c(1,1))
levels(hm_data$gender)
hm_data$gender
hm_data %>% mutate(gender = if_else(gender == "f", "female", "male"))
hm_data %>% mutate(gender = if_else(gender == "f", "female", "male")) -> hm_data
boxplot(others/count ~ gender, hm_data, bty="n")
hap <- c("alone", "with others")
boxplot(aloneScore$`mean(score)`, othersScore$`mean(score)`, bty="n",
ylab = "sentiment score")
text(x = hap, labels = hap)
axis(1, at = hap, labels = hap)
boxplot(aloneScore$`mean(score)`, othersScore$`mean(score)`, bty="n",
ylab = "sentiment score")
axis(1, at = hap, labels = hap)
rownames(installed.packages())
"ggradar" %in% rownames(installed.packages())
barsplot <- ggplot(countries[1:20,], aes(country, freq)) +
geom_bar(stat = "identity") + theme_classic()
ggplot(countries[1:20,], aes(country, freq)) +
geom_bar(stat = "identity") + theme_classic()
countries$country <- factor(countries$country, levels = countries$country[order(countries$freq)])
ggplot(countries[1:20,], aes(country, freq)) +
geom_bar(stat = "identity") + theme_classic()
boxplot(others/count ~ gender, hm_data, bty = 'l', col = c("red", "orange"))
boxplot(others/count ~ gender, hm_data, frame = F, col = c("green", "blue"), xaxt="n")
boxplot(others/count ~ gender, hm_data, frame = F, col = c("green", "blue"), xax="n")
boxplot(others/count ~ gender, hm_data, frame = F, col = c("green", "blue"), axes=FALSE)
axis(2)
boxplot(others/count ~ gender, hm_data, frame = F, col = c("lightgreen", "lightblue"))
knitr::opts_chunk$set(echo = F, warning=F, message=F)
# enable warnings and messages when changing something
Sys.info()
Sys.info()$release
str(Sys.info())
Sys.info()[2]
R.version()
R.Version()
R.Version()$version.string
packageDescription(wordcloud)
render("HappyAlone.Rmd",encoding="UTF-8")
shiny::runApp('Google_Drive/docs/UNIS/KU Leuven/Exchange/columbia/Courses/Applied Data Science/Shiny App Tutorial/Gabriel')
shiny::runApp('Google_Drive/docs/UNIS/KU Leuven/Exchange/columbia/Courses/Applied Data Science/Projects/Fall2018-Project2-sec1_proj2_grp1/doc/bikes')
install.packages("rjson")
d <- fromJSON("https://gbfs.citibikenyc.com/gbfs/en/station_status.json")
library(rjson)
d <- fromJSON("https://gbfs.citibikenyc.com/gbfs/en/station_status.json")
d <- fromJSON(file = "https://gbfs.citibikenyc.com/gbfs/en/station_status.json")
runApp('Google_Drive/docs/UNIS/KU Leuven/Exchange/columbia/Courses/Applied Data Science/Projects/Fall2018-Project2-sec1_proj2_grp1/doc/bikes')
library(leaflet)
runApp('Google_Drive/docs/UNIS/KU Leuven/Exchange/columbia/Courses/Applied Data Science/Projects/Fall2018-Project2-sec1_proj2_grp1/doc/bikes')
nycIcon <- makeIcon(
iconUrl = "http://main.tvgu1jdkm2wvqi.maxcdn-edge.com/wp-content/uploads/2016/SLH/mlb_primary/new_york_yankees_1915-1946.png",
iconWidth = 20*215/230, iconHeight = 20,
iconAnchorX = 20*215/230/2, iconAnchorY = 16
)
nycLatLong <- data.frame(
lat = c(40.748817, 40.689247, 40.785091, 40.758896, 40.752726, 40.75874, 40.779166, 40.706086, 40.75165, 40.699475, 41.111547, 40.715751),
lng = c(-73.985428, -74.044502, -73.968285, -73.985130, -73.977229, -73.978674, -73.962928, -73.996864, -73.975353, -74.039559, -73.858381, -73.997031))
nycLatLong %>%
leaflet() %>%
addTiles() %>%
addMarkers(icon = nycIcon)
nycLatLong %>%
leaflet() %>%
addTiles() %>%
addMarkers(icon = nycIcon, popup = nycSites) %>%
fitBounds(lat1 = 40.68, lng1 = -74.06, lat2 = 40.80, lng2 = -73.94)
runApp('Google_Drive/docs/UNIS/KU Leuven/Exchange/columbia/Courses/Applied Data Science/Projects/Fall2018-Project2-sec1_proj2_grp1/doc/bikes')
str(d)
d$data$stations[1]
stations <- fromJSON(file = "https://gbfs.citibikenyc.com/gbfs/en/station_information.json")
stations$data$stations[1]
stations$data$stations[1]$lat
stations$data$stations[1][[1]]
stations$data$stations[1][[1]]$lat
str(stations$data$stations)
length(stations$data$stations)
stationsPos <- data.frame(lat = rep(NA, l), lng <- rep(NA, l))
l <- length(stations$data$stations)
stationsPos <- data.frame(lat = rep(NA, l), lng <- rep(NA, l))
stationsPos
stationsPos <- data.frame(lat = rep(NA, l), lng <- rep(NA, l))
for(i in 1:l){
stationsPos$lat[i] <- stations$data$stations[i][[1]]$lat
stationsPos$lng[i] <- stations$data$stations[i][[1]]$lng
}
stations$data$stations[1][[1]]$lng
stations$data$stations[1][[1]]$lon
stationsPos <- data.frame(lat = rep(NA, l), lng <- rep(NA, l))
for(i in 1:l){
stationsPos$lat[i] <- stations$data$stations[i][[1]]$lat
stationsPos$lng[i] <- stations$data$stations[i][[1]]$lon
}
runApp('Google_Drive/docs/UNIS/KU Leuven/Exchange/columbia/Courses/Applied Data Science/Projects/Fall2018-Project2-sec1_proj2_grp1/doc/bikes')
runApp('Google_Drive/docs/UNIS/KU Leuven/Exchange/columbia/Courses/Applied Data Science/Projects/Fall2018-Project2-sec1_proj2_grp1/doc/bikes')
runApp('Google_Drive/docs/UNIS/KU Leuven/Exchange/columbia/Courses/Applied Data Science/Projects/Fall2018-Project2-sec1_proj2_grp1/doc/bikes')
runApp('Google_Drive/docs/UNIS/KU Leuven/Exchange/columbia/Courses/Applied Data Science/Projects/Fall2018-Project2-sec1_proj2_grp1/doc/bikes')
shiny::runApp('Google_Drive/docs/UNIS/KU Leuven/Exchange/columbia/Courses/Applied Data Science/Projects/Fall2018-Project2-sec1_proj2_grp1/doc')
runApp('Google_Drive/docs/UNIS/KU Leuven/Exchange/columbia/Courses/Applied Data Science/Projects/Fall2018-Project2-sec1_proj2_grp1/doc')
library(leaflet)
runApp('Google_Drive/docs/UNIS/KU Leuven/Exchange/columbia/Courses/Applied Data Science/Projects/Fall2018-Project2-sec1_proj2_grp1/doc')
runApp('Google_Drive/docs/UNIS/KU Leuven/Exchange/columbia/Courses/Applied Data Science/Projects/Fall2018-Project2-sec1_proj2_grp1/doc')
shiny::runApp('Google_Drive/docs/UNIS/KU Leuven/Exchange/columbia/Courses/Applied Data Science/Projects/Fall2018-Project2-sec1_proj2_grp1/doc')
load("./output/historicalData.RData")
getwd()
setwd("/Users/gabrielbenedict/Google_Drive/docs/UNIS/KU Leuven/Exchange/columbia/Courses/Applied Data Science/Projects/Fall2018-Project2-sec1_proj2_grp1/doc")
runApp()
runApp()
getwd()
load("./output/historicalData.RData")
load("./output/historicalData.RData")
load("./output/historicalData.RData")
library(tidyverse)
m <- c("01", "02", "03", "04", "05", "06", "07", "08", "09")
urls <- paste0("https://s3.amazonaws.com/tripdata/JC-2018",
m, "-citibike-tripdata.csv.zip")
dList <- list()
j <- 1
for(i in urls){
temp <- tempfile()
download.file(i,temp)
dList[[j]] <- read.csv(unz(temp, substr(i, 35, 65)))
unlink(temp)
j = j + 1
}
d <- do.call("rbind", dList)
d$time <- as.POSIXct(paste0("2018-01-01 ", substr(d$starttime, 12, 16)))
d$hour = as.numeric(d$time) %% (24*60*60) / 3600
d$band = cut(d$hour, breaks=seq(0, 24), include.lowest=TRUE,
right=FALSE)
dByTime <- d %>% group_by(start.station.longitude, start.station.latitude, band) %>%
dplyr::summarize(n = n())
dByTime$n <- dByTime$n/30*9
dByTime$lonBins = cut(dByTime$start.station.longitude, breaks=seq(min(dByTime$start.station.longitude), max(dByTime$start.station.longitude), length.out = 50), include.lowest=TRUE, right=FALSE)
dByTime$latBins = cut(dByTime$start.station.latitude, breaks=seq(min(dByTime$start.station.latitude), max(dByTime$start.station.latitude), length.out = 50), include.lowest=TRUE, right=FALSE)
intervals <- levels(d$band)
save(list = c("dByTime", "intervals"), file = "../output/historicalData.RData")
load("./output/historicalData.RData")
getwd()
load("./output/historicalData.RData")
runApp()
runApp()
runApp()
hist3D(z = plotMatrix, bty = "n", col = "white",
border = "black", colvar = NULL, shade = 0.2,
ticktype = "detailed")
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
